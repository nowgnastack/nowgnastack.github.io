<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nowgnastack</title>
  
  <subtitle>지식 공유 스택</subtitle>
  <link href="https://nowgnastack.github.io/atom.xml" rel="self"/>
  
  <link href="https://nowgnastack.github.io/"/>
  <updated>2023-07-26T09:04:04.841Z</updated>
  <id>https://nowgnastack.github.io/</id>
  
  <author>
    <name>nowgnas</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSAFY 8기 회고 및 취업 후기</title>
    <link href="https://nowgnastack.github.io/2023/07/26/lotte/"/>
    <id>https://nowgnastack.github.io/2023/07/26/lotte/</id>
    <published>2023-07-26T08:51:32.000Z</published>
    <updated>2023-07-26T09:04:04.841Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2022.07 부터 2023.07까지의 회고를 담은 포스팅입니다.</p></blockquote><h2 id="SSAFY-8기-시작"><a href="#SSAFY-8기-시작" class="headerlink" title="SSAFY 8기 시작"></a>SSAFY 8기 시작</h2><p>엘리스 AI 트랙 4기를 마치고 바로 SSAFY 8기를 합격해 1년간 교육을 받았다.<br><a href="https://nowgnastack.github.io/2022/07/10/2022-07-10-ssafy/">SSAFY 8기 합격 후기</a></p><p>1학기 강의 교육과 2학기 프로젝트 수행으로 시간을 보냈다. SSAFY에서 Spring boot 기반의 백엔드는 처음 접했지만 재밌었다. 2학기에는 3번의 프로젝트를 수행하면서 백엔드와 웹 서비스 아키텍처를 이해하고 인프라를 구축할 수 있는 경험이었다. 현업에서 사용하는 이슈 관리 툴인 Jira도 사용해보고 배포 자동화를 위한 Jenkins를 구축해본 것은 가장 도움이 많이 되었다.</p><p>프로젝트를 하며 문제를 해결하기 위해 기술적으로 고민했던 것과 좋은 코드를 짜기 위해 3일동안 강의와 구글링을 한 것 등 깊게 고민할 수 있는 시간들이 재밌었다.</p><p>SSAFY는 실무와 유사한 툴을 가지고 개발 경험을 할 수 있는 점과 취업 특강에서 자소서나 포트폴리오 작성에 대해 도움을 받을 수 있어서 좋았다. 1년동안 대체로 좋았다고 기억될 것 같다.</p><h2 id="수료-후-취준-시작"><a href="#수료-후-취준-시작" class="headerlink" title="수료 후 취준 시작"></a>수료 후 취준 시작</h2><p>6월 말을 끝으로 SSAFY를 수료해 공식적인 백수가 되었다. SSAFY 3차 프로젝트 부터 자소서를 작성하고 가끔씩 면접을 봤지만 다 떨어지게 되었다.</p><p>작년 9월부터 지금까지 서류 합격률이 30.76%인데 정말 쓰는 서류마다 다 떨어지는 것을 보며 이게 되긴 하는건지 의문이 들 때도 있었다. 꾸준히 알고리즘과 CS 스터디를 하며 지원하여 롯데e커머스 채용연계형 교육생이 되었다.</p><h2 id="롯데e커머스-채용-연계형-교육에-합격-하기까지…"><a href="#롯데e커머스-채용-연계형-교육에-합격-하기까지…" class="headerlink" title="롯데e커머스 채용 연계형 교육에 합격 하기까지…"></a>롯데e커머스 채용 연계형 교육에 합격 하기까지…</h2><p>이번 전형은 6개월동안 비트 컴퓨터에서 교육을 받고 입사를 하는 과정이다. 23년 8월 1일부터 교육이 시작되고 1월에 끝난 후 2월에 입사하게 된다. 특이한 점은 지금까지 채용 전형 중 가장 빠르게 진행된 부분이다.</p><h3 id="서류전형"><a href="#서류전형" class="headerlink" title="서류전형"></a>서류전형</h3><p>채용 설명회를 들으며 롯데e커머스에서 사용하는 기술들을 많이 사용해 보기도 하고 EKS 환경에서 돌아가는 서비스를 경험해 보고 싶었다. 2022 AWS summit 에서 AWS EKS 환경 안정화 강연을 들어보며 더욱 가고 싶은 생각이 들었다.</p><p>롯데온을 개발하는 조직으로 채용 페이지 설명 그대로 대기업의 안정성과 스타트업의 혁신성을 모두 가지고 있다고 생각했다. 3개월차 신입의 아이디어로 데이터 이전 비용을 절감하고 기술 블로그 내용을 보며 개발하는 사고방식이 나와 유사하다는 것을 느껴 자소서가 잘 쓰여진것 같다. 그렇게 서류를 합격하게 되었다!</p><h3 id="코딩-테스트-및-기술-면접"><a href="#코딩-테스트-및-기술-면접" class="headerlink" title="코딩 테스트 및 기술 면접"></a>코딩 테스트 및 기술 면접</h3><p>1차 전형은 교육 들을 비트 컴퓨터에서 진행된다. Java 수기 시험을 1시간 동안 10문제 풀이를 하고 15분 대기 후 면접을 보게 된다. 면접은 비트 컴퓨터 회장님이 직접 보시고 지금까지 프로젝트 수행했던 것들을 말씀드리면 된다. 한 타임에 20명 가까이 면접을 보는데 정말 대단한 사람들이 많이 있다는 것을 느꼈다. 1차 합격 여부는 롯데e커머스에서 최종 결정하며 1차를 합격하게 되었다.</p><h3 id="2차-실무-임원-면접"><a href="#2차-실무-임원-면접" class="headerlink" title="2차 실무 &#x2F; 임원 면접"></a>2차 실무 &#x2F; 임원 면접</h3><p>2차 임원 면접은 롯데타워에 가서 보게된다. 면접 대기실에서 보이는 뷰가 정말 좋았다. 롯데월드가 보이는 방향인데 서울이 한 눈에 들어오는 뷰였다. 지하철에서 내려서 대기실까지 쭉 실내로 올 수 있다는 것도 좋았고 분위기나 경치를 보고 더 오고싶어졌다.</p><p>2차 면접은 다대다 면접으로 진행되었다. 지금까지 공부하고 프로젝트를 수행하며 경험한 것 중 나의 개발 가치관을 잘 나타낼 수 있도록 답변했다. 대단한 경험은 아니지만, 여러가지 경험을 했던 것이 도움되었다.</p><p>잘 하시는 분들이 충분히 많다고 생각했고, 이전 2차 면접에서 잘 봤다고 생각했었지만 떨어진 경험이 있어 이번 2차도 크게 기대하지 않고 있었는데 좋은 결과를 얻었다.</p><p><img src="https://github.com/nowgnastack/nowgnastack.github.io/assets/55802893/965cfce8-e3ec-4e85-81a9-6c55dada8dd9"></p><p>합격 다음 날 바로 롯데타워에서 기업OT가 진행되었다.</p><h2 id="취준-후기…"><a href="#취준-후기…" class="headerlink" title="취준 후기…"></a>취준 후기…</h2><p>SSAFY 8기에 입과할 당시 주변 친구들이 1학기 교육을 전후로 나름 좋은 회사에 가는 것을 보며 나도 열심히 하면 저렇게 1학기 하고 갈 수 있을 것이라 생각했지만, 착각이었다.</p><p>SSAFY를 수료하고 바로 공백기가 시작되어 압박감이 있었고 하반기에 나와 맞는 공고가 얼마나 나올지 예상을 할 수 없는 상태가 힘들었던것 같다. 취준하면서 많이 들었던 말이지만, 이번 롯데e커머스에 합격하고나서 각자 나에게 알맞는 회사가 있다고 느꼈다. 좋은 기회가 왔고 앞으로도 공부한 내용들을 꾸준히 정리할 것이다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2022.07 부터 2023.07까지의 회고를 담은 포스팅입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;SSAFY-8기-시작&quot;&gt;&lt;a href=&quot;#SSAFY-8기-시작&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="후기" scheme="https://nowgnastack.github.io/categories/%ED%9B%84%EA%B8%B0/"/>
    
    
    <category term="SSAFY" scheme="https://nowgnastack.github.io/tags/SSAFY/"/>
    
    <category term="취업후기" scheme="https://nowgnastack.github.io/tags/%EC%B7%A8%EC%97%85%ED%9B%84%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>REST API의 특징과 설계</title>
    <link href="https://nowgnastack.github.io/2023/07/23/rest-api/"/>
    <id>https://nowgnastack.github.io/2023/07/23/rest-api/</id>
    <published>2023-07-23T07:31:07.000Z</published>
    <updated>2023-07-23T08:04:30.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API란-무엇인가"><a href="#API란-무엇인가" class="headerlink" title="API란 무엇인가 ?"></a>API란 무엇인가 ?</h2><p>API는 Application Programming Interface(애플리케이션 프로그램 인터페이스)의 줄임말입니다. API의 맥락에서 애플리케이션이라는 단어는 고유한 기능을 가진 모든 소프트웨어를 나타냅니다. 인터페이스는 두 애플리케이션 간의 서비스 계약이라고 할 수 있습니다. 이 계약은 요청과 응답을 사용하여 두 애플리케이션이 서로 통신하는 방법을 정의합니다. API 문서에는 개발자가 이러한 요청과 응답을 구성하는 방법에 대한 정보가 들어 있습니다.<br><sub><a href="https://aws.amazon.com/ko/what-is/api/">aws 문서</a><sub></p><h2 id="REST-API-Representational-State-Transfer"><a href="#REST-API-Representational-State-Transfer" class="headerlink" title="REST API(Representational State Transfer)"></a>REST API(Representational State Transfer)</h2><p>REST는 자원을 이름으로 구분해서 자원의 상태를 주고 받는 것을 의미한다. Client에서 Server로 요청할 때 Http 프로토콜 메소드를 사용해 요청이 이뤄진다.</p><p>GET, PUT, DELETE 등의 함수 집합을 정의한다. 이런 함수들을 이용해 Client는 Server로부터 데이터를 교환하게 된다.</p><p>RESTful한 API를 구축하기 위해 6가지 조건이 있다.</p><h3 id="Client-Server-architecture"><a href="#Client-Server-architecture" class="headerlink" title="Client-Server architecture"></a>Client-Server architecture</h3><p>정보를 가지고 있는 Server와 정보를 요청하는 Client로 구성된다. Server는 API제공, 비즈니스 로직 처리를 담당하고, Client는 사용자 인증이나 세션, 로그인 정보 등을 직접 관리하고 책임진다. Server와 Client 사이의 의존성이 줄어들게 된다.</p><h3 id="Stateless"><a href="#Stateless" class="headerlink" title="Stateless"></a>Stateless</h3><p>Stateless(무상태)는 REST API의 대표적 특징이다. Http의 특성을 이용하며 Server에서 작업을 하기 위해 상태 정보를 기억할 필요가 없고 Client의 요청에 대해서만 처리하면 된다. Server는 Client의 요청을 독립적으로 인식하고 처리하기 때문에 Server 처리의 일관성을 부여하게되고 부담이 줄어들게 된다.</p><h3 id="Cashable"><a href="#Cashable" class="headerlink" title="Cashable"></a>Cashable</h3><p>캐시 처리 기능은 Http의 특징인 캐시를 사용할 수 있다. 캐시는 대량의 요청을 효율적으로 관리 가능하고 빠른 응답 시간을 가진다.</p><h3 id="Layerd-System"><a href="#Layerd-System" class="headerlink" title="Layerd System"></a>Layerd System</h3><p>계층화 특징은 Client와 Server의 통신 사이에 프록시 서버나 암호화 계층 등 중간 매체를 둘 수 있다. 또한, 중간 매체와 통신 여부를 Client나 Server는 알 수 없도록 설계 되어야 한다.</p><h3 id="Uniform-Interface"><a href="#Uniform-Interface" class="headerlink" title="Uniform Interface"></a>Uniform Interface</h3><p>인터페이스 일관성은 URI로 지정한 자원(정보)에 대한 동작이 통일되어야 하고, 사용자의 정보가 하나의 URI에 속함을 보장하는 특징이다. 특정 기술이나 언어에 종속적이지 않고 Http 프로토콜을 따르는 플랫폼에서 모두 사용 가능하다.</p><h3 id="Code-On-Demand-Optional"><a href="#Code-On-Demand-Optional" class="headerlink" title="Code On Demand(Optional)"></a>Code On Demand(Optional)</h3><p>REST API는 일반적으로 정적 자원(정보)을 전송하지만, 응답에 실행 코드가 포함될 수 있다. 이 경우에 코드는 요청시에만 실행 되어야 한다.</p><h2 id="REST-API-설계"><a href="#REST-API-설계" class="headerlink" title="REST API 설계"></a>REST API 설계</h2><p>REST API는 다음 규칙에 따라 설계한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/post   (O)</span><br><span class="line"></span><br><span class="line">http://example.com/post/  (X)</span><br></pre></td></tr></table></figure><ul><li>URI는 명사를 사용하고 소문자로 작성되어야 한다.</li><li>URI의 마지막에는 <code>/</code>를 포함하지 않는다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/post-list  (O)</span><br><span class="line"></span><br><span class="line">http://example.com/post_list  (X)</span><br></pre></td></tr></table></figure><ul><li>URI에는 언더바가 아닌 하이픈을 사용한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/post/assets/example  (O)</span><br><span class="line"></span><br><span class="line">http://example.com/post/assets/example.png  (X)</span><br></pre></td></tr></table></figure><ul><li>URI에는 파일의 확장자를 표시하지 않는다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/post/:post-id</span><br><span class="line"></span><br><span class="line">http://example.com/post/&#123;post-id&#125;  (O)</span><br></pre></td></tr></table></figure><ul><li>resource 간에 연관 관계가 있는경우 위와 같이 사용한다.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;API란-무엇인가&quot;&gt;&lt;a href=&quot;#API란-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;API란 무엇인가 ?&quot;&gt;&lt;/a&gt;API란 무엇인가 ?&lt;/h2&gt;&lt;p&gt;API는 Application Programming Interface</summary>
      
    
    
    
    <category term="api" scheme="https://nowgnastack.github.io/categories/api/"/>
    
    
    <category term="rest api" scheme="https://nowgnastack.github.io/tags/rest-api/"/>
    
    <category term="http" scheme="https://nowgnastack.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Profile 환경변수 분할 적용</title>
    <link href="https://nowgnastack.github.io/2023/01/18/2023-01-19-springboot-env/"/>
    <id>https://nowgnastack.github.io/2023/01/18/2023-01-19-springboot-env/</id>
    <published>2023-01-18T14:20:00.000Z</published>
    <updated>2023-07-23T16:21:41.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="환경에-따른-설정-파일-분할-적용"><a href="#환경에-따른-설정-파일-분할-적용" class="headerlink" title="환경에 따른 설정 파일 분할 적용?"></a>환경에 따른 설정 파일 분할 적용?</h2><p>팀 프로젝트를 진행하다보면 설정 파일에서 형상 관리를 하면서 충돌이 난다. 로컬에서 테스트하는 데이터베이스나 포트가 다른 경우 저장소에서 pull 받을 때마다 수정해줘야 하는 귀찮음이 있다.</p><p>귀찮음을 해소하면서 프로젝트의 환경을 개발, 운영, 로컬로 나눌 수 있는 설정파일 분할 적용에 대해 알아보자 !</p><h2 id="spring-boot의-설정-파일-application-yml"><a href="#spring-boot의-설정-파일-application-yml" class="headerlink" title="spring boot의 설정 파일 application.yml"></a>spring boot의 설정 파일 application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="string">jpa,</span> <span class="string">datasource...</span></span><br></pre></td></tr></table></figure><p>기본적인 설정파일이다. 서버의 포트와 데이터베이스 설정 등을 정의할 수 있다.</p><p>이번 포스팅에서는 개발, 운영, 로컬을 정의해본다.</p><h2 id="환경-변수-파일-만들기"><a href="#환경-변수-파일-만들기" class="headerlink" title="환경 변수 파일 만들기"></a>환경 변수 파일 만들기</h2><p>환경 변수 파일을 resources폴더 아래에 <code>application-dev.yml</code>, <code>application-local.yml</code>, <code>application-prod.yml</code>을 만든다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-dev.yml</span></span><br><span class="line"><span class="comment"># 개발</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">----</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">----</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-prod.yml</span></span><br><span class="line"><span class="comment"># 운영</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">----</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">----</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application-local.yml</span></span><br><span class="line"><span class="comment"># 로컬</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">...</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">----</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">----</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>각 서버 마다 포트와 데이터베이스를 다르게 적용하였다. 세 가지 환경을 나눠 서버를 개발 할 수 있는데 환경을 나눠 실행하는 방법은 <code>Run Configuration</code>에서 profile을 설정해주면 된다.</p><p><code>spring.config.active.on-profile</code>에 dev, local, prod와 같이 환경에 대한 이름을 설정해 주면된다.</p><h3 id="Edit-Configuration"><a href="#Edit-Configuration" class="headerlink" title="Edit Configuration"></a>Edit Configuration</h3><p><img src="/images/posting/backend/springboot_env/pic1.png" alt="스크린샷 2023-01-18 오후 11.50.09.png"></p><h3 id="Active-profiles"><a href="#Active-profiles" class="headerlink" title="Active profiles"></a>Active profiles</h3><p><img src="/images/posting/backend/springboot_env/pic2.png" alt="스크린샷 2023-01-18 오후 11.50.49.png"></p><p>상단에 Edit Configuration을 열어 profile에 dev, local, prod 중 하나를 넣어 실행하면 환경에 따라 서버를 실행할 수 있다.</p><p><img src="/images/posting/backend/springboot_env/pic3.png" alt="스크린샷 2023-01-18 오후 11.54.55.png"></p><p>local을 넣어 실행하게되면 로그에 profile이 local로 찍히게 된다.</p><p>로컬에서 개발하는 환경은 저장소에 올라가면 안되므로 .gitignore에 넣어 관리한다.</p><h2 id="spring-boot-env-파일-설정하기"><a href="#spring-boot-env-파일-설정하기" class="headerlink" title="spring boot env 파일 설정하기"></a>spring boot env 파일 설정하기</h2><p>개발을 진행하다보면 토큰을 만드는 secret 키나 api 요청하는 개인 키가 필요하다. 이런 키는 저장소에 올리지 않고 사용해야 한다.</p><p>설정파일에 넣고 .gitignore에 추가해 개발을 해야 한다. 사용자 정의 환경변수 파일을 만들고 spring boot가 이 설정파일들을 알게 해보자</p><h2 id="env-yml"><a href="#env-yml" class="headerlink" title="env.yml"></a>env.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">oauth:</span></span><br><span class="line">  <span class="attr">naver:</span></span><br><span class="line">    <span class="attr">redirect:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://nid.naver.com/oauth2.0/token</span></span><br><span class="line">      <span class="attr">header:</span> <span class="string">Content-type</span></span><br><span class="line">      <span class="attr">header-value:</span> <span class="string">application/x-www-form-urlencoded;charset=utf-8</span></span><br><span class="line">      <span class="attr">grant-type:</span> <span class="string">authorization_code</span></span><br><span class="line">    <span class="attr">get-info:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://openapi.naver.com/v1/nid/me</span></span><br><span class="line">      <span class="attr">header-type:</span> <span class="string">Content-type</span></span><br><span class="line">      <span class="attr">header-value:</span> <span class="string">application/x-www-form-urlencoded;charset=utf-8</span></span><br><span class="line">      <span class="attr">auth:</span></span><br><span class="line">        <span class="attr">header-type:</span> <span class="string">Authorization</span></span><br><span class="line">        <span class="attr">header-value:</span> <span class="string">&quot;Bearer &quot;</span></span><br></pre></td></tr></table></figure><p>먼저 사용자 정의 환경 변수 파일이다. resources 폴더에 추가하여 사용한다.</p><h2 id="EnvConfig"><a href="#EnvConfig" class="headerlink" title="EnvConfig"></a>EnvConfig</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnvConfig</span> <span class="keyword">implements</span> <span class="title class_">PropertySourceFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">YamlPropertiesFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YamlPropertiesFactoryBean</span>();</span><br><span class="line">        factoryBean.setResources(resource.getResource());</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> factoryBean.getObject();</span><br><span class="line">        <span class="keyword">assert</span> properties != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(Objects.requireNonNull(resource.getResource().getFilename()), properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PropertySourceFactory</code>의 구현체 <code>YamlPropertiesFactoryBean</code>를 사용해 환경 변수를 잡을 EnvConfig 클래스를 생성한다.</p><h2 id="환경변수-파일-위치-잡기"><a href="#환경변수-파일-위치-잡기" class="headerlink" title="환경변수 파일 위치 잡기"></a>환경변수 파일 위치 잡기</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@PropertySource(value = &#123;</span></span><br><span class="line"><span class="meta">        &quot;classpath:env/env.yml&quot;,</span></span><br><span class="line"><span class="meta">&quot;classpath:env/env-key.yml&quot;,</span></span><br><span class="line"><span class="meta">...</span></span><br><span class="line"><span class="meta">&#125;, factory = EnvConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring boot 애플리케이션 파일에서 <code>@PropertySource</code>를 사용해 yml파일의 위치를 추가해 준다.</p><p>value 속성에 환경변수가 필요한 파일들의 위치를 지정해 주면 되는데 resources의 경로는 classpath:로 시작하며 spring boot가 잡을 파일까지 경로를 추가해 주면된다.</p><p>factory 속성은 위에서 정의해준 EnvConfig 클래스를 넣어주면 된다</p><h2 id="환경-변수-사용하기"><a href="#환경-변수-사용하기" class="headerlink" title="환경 변수 사용하기"></a>환경 변수 사용하기</h2><p>jwt 토큰에 사용할 secret 키를 환경변수에 추가하여 사용해 보자</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># env.yml</span></span><br><span class="line"><span class="attr">jwt-config:</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">sldiufhwkejfb</span></span><br><span class="line">  <span class="attr">header-prefix:</span> <span class="string">&quot;Bearer &quot;</span></span><br></pre></td></tr></table></figure><p>환경 변수에 위와 같은 구조로 값을 정의해 준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;jwt-config.secret&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String jwtSecret;</span><br></pre></td></tr></table></figure><p>필드에서 @Value 어노테이션을 사용해 ${}안에 계층 구조에 따라 정의해주면 된다. .yml 파일에서 계층 구조의 구분은 .으로 한다.</p>]]></content>
    
    
    <summary type="html">spring boot에서 yml 파일로 환경에 따른 설정 파일 적용하기</summary>
    
    
    
    <category term="spring boot" scheme="https://nowgnastack.github.io/categories/spring-boot/"/>
    
    
    <category term="env" scheme="https://nowgnastack.github.io/tags/env/"/>
    
    <category term="profile" scheme="https://nowgnastack.github.io/tags/profile/"/>
    
    <category term="spring boot" scheme="https://nowgnastack.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins를 사용한 CI/CD With Docker</title>
    <link href="https://nowgnastack.github.io/2022/12/29/2022-12-29-jenkins/"/>
    <id>https://nowgnastack.github.io/2022/12/29/2022-12-29-jenkins/</id>
    <published>2022-12-29T13:15:00.000Z</published>
    <updated>2023-07-23T15:22:09.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI&#x2F;CD"></a>CI&#x2F;CD</h2><p>Continuous Integration과 Continuous Delivery이다. 애플리케이션 개발 단계를 자동화하여 애플리케이션 개발을 보다 짧은 주기로 고객에게 제공하는 방법이다.<br>애플리케이션 통합, 테스트, 제공, 배포에 이르는 라이프사이클 전체에 걸쳐 지속적인 자동화와 모니터링을 제공한다.</p><h2 id="docker에-jenkins-컨테이너-실행하기"><a href="#docker에-jenkins-컨테이너-실행하기" class="headerlink" title="docker에 jenkins 컨테이너 실행하기"></a>docker에 jenkins 컨테이너 실행하기</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name jenkins -p 9090:8080 -p 50000:50000 -d -v /var/run/docker.sock:/var/run/docker.sock -v jenkins_home:/var/jenkins_home -u root jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><p>위 명령을 사용해 docker에 jenkins 컨테이너를 실행한다. -v 옵션은 저장소를 공유하는 설정이다.</p><h2 id="jenkins에서-docker-설치"><a href="#jenkins에서-docker-설치" class="headerlink" title="jenkins에서 docker 설치"></a>jenkins에서 docker 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.docker.com/ &gt; dockerinstall &amp;&amp; <span class="built_in">chmod</span> 777 dockerinstall &amp;&amp; ./dockerinstall</span><br><span class="line"></span><br><span class="line">apt install docker-compose</span><br></pre></td></tr></table></figure><p>jenkins에 다시 docker를 설치해 준다. curl을 사용해 설치하고 docker-compose를 사용할 경우 아래 명령어도 함께 실행한다.</p><h2 id="docker-sock-권한-변경"><a href="#docker-sock-권한-변경" class="headerlink" title="docker.sock 권한 변경"></a>docker.sock 권한 변경</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 666 /var/run/docker.sock</span><br></pre></td></tr></table></figure><p>docker.sock 경로 권한을 666으로 변경해 그룹 내 다른 사용자도 접근 가능하도록 설정한다.</p><p><img src="/images/posting/backend/jenkins/pic1.png" alt="스크린샷 2022-12-29 오후 10.36.12.png"></p><p>jenkins shell로 접근하여 실행중인 docker 컨테이너를 확인한다. 로컬에 설치된 docker의 컨테이너를 확인할 수 있다.</p><h2 id="vue-프로젝트-배포하기"><a href="#vue-프로젝트-배포하기" class="headerlink" title="vue 프로젝트 배포하기"></a>vue 프로젝트 배포하기</h2><h3 id="vue-프로젝트-생성"><a href="#vue-프로젝트-생성" class="headerlink" title="vue 프로젝트 생성"></a>vue 프로젝트 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create deploytest</span><br></pre></td></tr></table></figure><p>vue 프로젝트를 생성한다. 기본 vue 프로젝트를 gitlab에 배포할 것이다.</p><h2 id="jenkins에서-배포하기"><a href="#jenkins에서-배포하기" class="headerlink" title="jenkins에서 배포하기"></a>jenkins에서 배포하기</h2><p><img src="/images/posting/backend/jenkins/pic2.png" alt="스크린샷 2022-12-29 오후 10.40.07.png"></p><p>프로젝트 이름은 vue_deploy로 한다.</p><p><img src="/images/posting/backend/jenkins/pic3.png" alt="스크린샷 2022-12-29 오후 10.41.07.png"></p><p>생성한 vue repository 경로를 추가한다.</p><p><img src="/images/posting/backend/jenkins/pic4.png" alt="스크린샷 2022-12-29 오후 10.41.51.png"></p><p>빌드가 발생하는 경우를 선택해 준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t vue:front .</span><br><span class="line">docker run --name vue -d -p 8080:8080 vue:front</span><br></pre></td></tr></table></figure><p>build 설정에 Execute shell 을 선택하고 Command에 위 명령어를 넣어준다.</p><p><img src="/images/posting/backend/jenkins/pic5.png" alt="스크린샷 2022-12-29 오후 10.48.21.png"></p><p><img src="/images/posting/backend/jenkins/pic6.png" alt="스크린샷 2022-12-29 오후 10.49.06.png"></p><p>jenkins에서 정상적으로 배포된 것을 확인할 수 있고, docker 컨테이너도 정상적으로 실행되어 페이지 접근이 잘 되는것을 볼 수 있다.</p>]]></content>
    
    
    <summary type="html">jenkins로 vue 프로젝트 배포하기</summary>
    
    
    
    <category term="deploy" scheme="https://nowgnastack.github.io/categories/deploy/"/>
    
    
    <category term="ci/cd deploy docker jenkins" scheme="https://nowgnastack.github.io/tags/ci-cd-deploy-docker-jenkins/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL Event Scheduler로 데이터 조작하기</title>
    <link href="https://nowgnastack.github.io/2022/12/29/2022-12-29-event_scheduler/"/>
    <id>https://nowgnastack.github.io/2022/12/29/2022-12-29-event_scheduler/</id>
    <published>2022-12-29T03:55:00.000Z</published>
    <updated>2023-07-23T15:22:02.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Event-Scheduler"><a href="#Event-Scheduler" class="headerlink" title="Event Scheduler"></a>Event Scheduler</h1><p>mysql의 event scheduler는 주기적으로 데이터베이스에 작업을 해야 할 경우 사용한다. 지속적으로 쌓이는 temporary 데이터가 있을 때 해당 테이블을 자주 비워줌으로써 용량 차지가 되지 않게끔 해야한다.</p><p>매번 개발자가 테이블을 비울 필요 없이 데이터베이스 자체에 어떤 이벤트를 걸어주고 주기적으로 반복되게끔 할 수 있는 것이 event scheduler이다.</p><h2 id="회원-테이블-생성하기"><a href="#회원-테이블-생성하기" class="headerlink" title="회원 테이블 생성하기"></a>회원 테이블 생성하기</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">member</span></span><br><span class="line">(</span><br><span class="line">    id    <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    name  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    email <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Event Scheduler 를 테스트하기 위해 간단한 회원 테이블을 생성한다</p><h2 id="Event-Scheduler-사용-확인하기"><a href="#Event-Scheduler-사용-확인하기" class="headerlink" title="Event Scheduler 사용 확인하기"></a>Event Scheduler 사용 확인하기</h2><p><img src="/images/posting/database/event_scheduler/pic1.png" alt="스크린샷 2022-12-29 오후 1.10.36.png"></p><p>event scheduler 사용여부를 확인한다. Value가 ON으로 되어 있다.</p><h2 id="1분마다-데이터가-등록되는-Event-Scheduler"><a href="#1분마다-데이터가-등록되는-Event-Scheduler" class="headerlink" title="1분마다 데이터가 등록되는 Event Scheduler"></a>1분마다 데이터가 등록되는 Event Scheduler</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> event if <span class="keyword">not</span> <span class="keyword">exists</span> insert_event_minute</span><br><span class="line">    <span class="keyword">on</span> schedule</span><br><span class="line">        <span class="keyword">every</span> <span class="number">1</span> <span class="keyword">minute</span></span><br><span class="line">    <span class="keyword">on</span> completion <span class="keyword">not</span> preserve</span><br><span class="line">    enable</span><br><span class="line">    comment <span class="string">&#x27;insert member&#x27;</span></span><br><span class="line">    DO</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, email)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/posting/database/event_scheduler/pic2.png" alt="스크린샷 2022-12-29 오후 2.10.31.png"></p><p>1분마다 동일한 회원 정보를 추가하였다.</p><p><img src="/images/posting/database/event_scheduler/pic3.png" alt="스크린샷 2022-12-29 오후 2.11.29.png"></p><p>이벤트 스키마의 테이블이다. 3번째 이벤트가 1분마다 실행되는 이벤트의 데이터이다. 시작 시간은 05:07이고 마지막으로 실행된 시간이 05:10이다. 1분 마다 정상적으로 실행 중인것을 확인할 수 있다.</p><h2 id="현재-시각으로부터-5분-후-모든-데이터를-삭제하는-Event-Scheduler"><a href="#현재-시각으로부터-5분-후-모든-데이터를-삭제하는-Event-Scheduler" class="headerlink" title="현재 시각으로부터 5분 후 모든 데이터를 삭제하는 Event Scheduler"></a>현재 시각으로부터 5분 후 모든 데이터를 삭제하는 Event Scheduler</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> event if <span class="keyword">not</span> <span class="keyword">exists</span> del_data</span><br><span class="line">    <span class="keyword">on</span> schedule</span><br><span class="line">        <span class="keyword">AT</span> DATE_ADD(now(), <span class="type">interval</span> <span class="number">5</span> <span class="keyword">minute</span>)</span><br><span class="line">    <span class="keyword">on</span> completion <span class="keyword">not</span> preserve</span><br><span class="line">    enable</span><br><span class="line">    comment <span class="string">&#x27;delete table&#x27;</span></span><br><span class="line">    do</span><br><span class="line">    <span class="keyword">truncate</span> <span class="keyword">member</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/posting/database/event_scheduler/pic4.png" alt="스크린샷 2022-12-29 오후 2.21.52.png"></p><p>현재 시각으로부터 5분 후 member의 데이터를 모두 삭제하는 쿼리이다. 정확한 5분을 위해 <code>DATE_ADD()</code>를 사용해 <code>now()</code>로부터 5분 후에 삭제하도록 구현하였다. member의 모든 데이터가 삭제된 것을 확인할 수 있다. <code>completion not preserve</code> 옵션으로 이벤트 수행 후 이벤트를 삭제하도록 했다.</p><h2 id="특정-기간-동안만-반복-실행되는-Event-Scheduler"><a href="#특정-기간-동안만-반복-실행되는-Event-Scheduler" class="headerlink" title="특정 기간 동안만 반복 실행되는 Event Scheduler"></a>특정 기간 동안만 반복 실행되는 Event Scheduler</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> event if <span class="keyword">not</span> <span class="keyword">exists</span> insert_event_term</span><br><span class="line">    <span class="keyword">on</span> schedule</span><br><span class="line">        <span class="keyword">every</span> <span class="number">1</span> <span class="keyword">minute</span> starts now() ends DATE_ADD(now(), <span class="type">interval</span> <span class="number">5</span> <span class="keyword">minute</span>)</span><br><span class="line">    <span class="keyword">on</span> completion preserve</span><br><span class="line">    enable</span><br><span class="line">    comment <span class="string">&#x27;insert member&#x27;</span></span><br><span class="line">    DO</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (id, name, email)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/posting/database/event_scheduler/pic5.png" alt="스크린샷 2022-12-29 오후 2.28.52.png"></p><p>이벤트 정보 테이블이다. 4번째 이벤트가 실행 중이고, 특정 기간 동안만 반복하는 이벤트이다. 5분 동안 1분마다 회원 정보를 추가하는 쿼리로 실행하였다. 05:27에 시작하여 05:32에 종료되는 이벤트이다.</p><p><img src="/images/posting/database/event_scheduler/pic6.png" alt="스크린샷 2022-12-29 오후 2.32.53.png"></p><p>5분이 지난 후 이벤트가 DISABLED 상태로 되었다.</p><p><img src="/images/posting/database/event_scheduler/pic7.png" alt="스크린샷 2022-12-29 오후 2.33.26.png"></p><p>데이터 또한 정상적으로 추가된 것을 확인할 수 있다.</p><h1 id="이벤트-테이블-정보"><a href="#이벤트-테이블-정보" class="headerlink" title="이벤트 테이블 정보"></a>이벤트 테이블 정보</h1><p><img src="/images/posting/database/event_scheduler/pic8.png" alt="스크린샷 2022-12-29 오후 2.36.45.png"></p><p>위에서 실행시켰던 이벤트들의 정보이다.</p>]]></content>
    
    
    <summary type="html">mysql에서 event scheduler를 사용해보자</summary>
    
    
    
    <category term="database" scheme="https://nowgnastack.github.io/categories/database/"/>
    
    
    <category term="mysql" scheme="https://nowgnastack.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>좋은 객체 지향 프로그래밍을 위한 방법: SOLID</title>
    <link href="https://nowgnastack.github.io/2022/12/16/2022-12-17-solid/"/>
    <id>https://nowgnastack.github.io/2022/12/16/2022-12-17-solid/</id>
    <published>2022-12-16T04:46:00.000Z</published>
    <updated>2023-04-17T01:56:16.381Z</updated>
    
    <content type="html"><![CDATA[<p>클린 코드로 유명한 로버트 마틴의 SOLID 5가지 원칙을 알아보자</p><h1 id="SRP-Single-Responsibility-Principle"><a href="#SRP-Single-Responsibility-Principle" class="headerlink" title="SRP(Single Responsibility Principle)"></a>SRP(Single Responsibility Principle)</h1><p>첫 번째는 단일 책임 원칙이다. 간단하게 말하면 하나의 클래스는 하나의 책임을 가져야 한다는 원칙이다. 하나의 책임이라는 말은 규모가 클 수도 있고 작을 수도 있다. 상황에 따라 다를 것이고, 중요한 기준은 <strong>“변경”</strong>이다. 코드에서 변경이 발생했을 때 파급효과가 적다면 SRP원칙을 잘 따랐다고 볼 수 있다.</p><p>SRP원칙의 예시로는 UI가 변경되거나 객체의 생성과 사용을 분리하는 경우이다.</p><h1 id="OCP-Open-Closed-Principle"><a href="#OCP-Open-Closed-Principle" class="headerlink" title="OCP(Open&#x2F;Closed Principle)"></a>OCP(Open&#x2F;Closed Principle)</h1><p>개방-폐쇄 원칙은 소프트웨어 요소는 확장에는 개방되어 있어야 하고 변경에는 닫혀 있어야 한다는 의미이다. 요구사항의 변경이나 추가 사항이 발생해도 기존 구성요소는 수정이 일어나지 않도록 해야 한다는 의미이다. OCP 원칙을 만족하기 위해 추상화와 다형성의 특징을 사용할 수 있다.</p><p>구현 객체를 변경하려면 클라이언트 코드 변경이 필요하다. 이는 OCP 원칙을 따르지 못하기 때문에 객체를 생성하고, 연관 관계를 맺어주는 별도의 조립 설정자가 필요하다.</p><p>OCP원칙을 만족하기 위해 변경될 것과 변경되지 않을 것을 명확히 해야 한다.</p><h1 id="LSP-Liskov-Substitution-Principle"><a href="#LSP-Liskov-Substitution-Principle" class="headerlink" title="LSP(Liskov Substitution Principle)"></a>LSP(Liskov Substitution Principle)</h1><p>리스코프 치환 원칙은 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다는 의미이다. 또한 자식 클래스의 상세 구현체를 부모 클래스는 알 필요가 없다는 뜻이다. 서브 클래스가 확장에 대한 인터페이스를 준수해야 하는 것을 의미한다. 자식 클래스가 부모 클래스 메소드가 가진 의미를 해치지 않는 선에서 재정의가 가능하다.</p><h1 id="ISP-Interface-Segregation-Principle"><a href="#ISP-Interface-Segregation-Principle" class="headerlink" title="ISP(Interface Segregation Principle)"></a>ISP(Interface Segregation Principle)</h1><p>인터페이스 분리 원칙은 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다는 원칙이다. 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스보다 낫다는 의미이다. 이렇게 구현하게 되면 인터페이스가 명확해지고, 대체 가능성이 높아진다.</p><p>하나의 큰 인터페이스를 만들기보다 구체적인 작은 단위로 분리하여 필요한 인터페이스만 상속하여 ISP 원칙을 만족하게 된다. 인터페이스의 크기가 크다는 것은 한번에 지켜야할 약속이 많아지는것을 의미하므로 분리하는 것이 좋다.</p><h1 id="DIP-Dependency-Inversion-Principle"><a href="#DIP-Dependency-Inversion-Principle" class="headerlink" title="DIP(Dependency Inversion Principle)"></a>DIP(Dependency Inversion Principle)</h1><p>의존 관계 역전 원칙은 클라이언트 코드가 구현 클래스에 의존하지 않고 인터페이스에 의존하게 하는 것이다. 프로그래머는 구체적인 클래스에 의존하지 말고 추상화된 클래스에 의존해야 한다는 뜻이다.</p>]]></content>
    
    
    <summary type="html">SOLID원칙에 대해 알아본다</summary>
    
    
    
    <category term="spring" scheme="https://nowgnastack.github.io/categories/spring/"/>
    
    
    <category term="SOLID java oop spring" scheme="https://nowgnastack.github.io/tags/SOLID-java-oop-spring/"/>
    
  </entry>
  
  <entry>
    <title>Vue 프로젝트 생성과 Todo List 만들기</title>
    <link href="https://nowgnastack.github.io/2022/11/10/2022-11-10-vuetodo/"/>
    <id>https://nowgnastack.github.io/2022/11/10/2022-11-10-vuetodo/</id>
    <published>2022-11-09T15:54:00.000Z</published>
    <updated>2023-07-23T15:21:52.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="create-project"><a href="#create-project" class="headerlink" title="create project"></a>create project</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create appname</span><br></pre></td></tr></table></figure><p>vue create를 사용하여 vue 프로젝트를 생성한다. 프로젝트 이름에는 대문자가 들어갈 수 없으며, 하이픈(-)은 사용 가능하다. (ex. my-app)</p><p><img src="/images/posting/vue/vuetodo/pic1.png" alt="스크린샷 2022-11-09 오후 2.06.43.png"></p><p>위 명령어를 치게 되면 vue 프로젝트를 생성할 수 있는 선택지가 나온다. vue 2, 3버전을 사용하거나 원하는 의존성을 따로 설치할 수 있는 Manually 옵션이 있다. 이번 프로젝트는 Manually를 선택해서 생성해 본다.</p><p><img src="/images/posting/vue/vuetodo/pic2.png" alt="스크린샷 2022-11-09 오후 2.08.29.png"></p><p>Manually를 선택하게 되면 프로젝트 설정에 대한 내용이 나온다. Babel, Router, Vuex, Linter &#x2F; Formatter를 선택해 준다.</p><p><img src="/images/posting/vue/vuetodo/pic3.png" alt="스크린샷 2022-11-09 오후 2.09.47.png"></p><p>버전은 2, 3 버전 중 선택이 가능하다. 이번 프로젝트는 2 버전을 선택한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use <span class="built_in">history</span> mode <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback <span class="keyword">in</span> production)</span><br></pre></td></tr></table></figure><p>위와 같은 router에 대한 질문이 나오는데 Yes를 선택해 준다.</p><p><img src="/images/posting/vue/vuetodo/pic4.png" alt="스크린샷 2022-11-09 오후 2.13.14.png"></p><p>linter와 fommater에 대한 질문이다. 다양한 fomatting이 있지만 이번 프로젝트는 가장 위에 있는 것을 선택해 준다.</p><p><img src="/images/posting/vue/vuetodo/pic5.png" alt="스크린샷 2022-11-09 오후 2.14.00.png"></p><p>Lint가 언제 코드를 확인해 주는가에 대한 내용이다. 저장 시 확인해 주는 것으로 선택한다.</p><p><img src="/images/posting/vue/vuetodo/pic6.png" alt="스크린샷 2022-11-09 오후 2.14.45.png"></p><p>프로젝트에 대한 설정들을 어디에 명시할지에 대한 질문이다 package.json을 선택해 준다.</p><p><img src="/images/posting/vue/vuetodo/pic7.png" alt="스크린샷 2022-11-09 오후 2.15.34.png"></p><p>지금까지 선택한 사항들을 저장할 것인지에 대한 질문이다. linter 부분에서 가장 위에 있는걸 선택해서 eslint-default라고 이름을 지어줄 것이다.</p><p><img src="/images/posting/vue/vuetodo/pic8.png" alt="스크린샷 2022-11-09 오후 2.16.44.png"></p><p>이름을 지어주어 preset을 저장하면 다음 프로젝트 생성 시 바로 사용할 수 있다.</p><h1 id="Todo-기능-만들어보기"><a href="#Todo-기능-만들어보기" class="headerlink" title="Todo 기능 만들어보기"></a>Todo 기능 만들어보기</h1><p>프로젝트 세팅이 끝났으니 할일을 추가하고 완료 표시를 할 수 있는 todo list를 만들어보자</p><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/board&quot;</span>&gt;</span>board<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |<span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/todo&quot;</span>&gt;</span>TODO<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">HomeView</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/todo&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;todo&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">TodoView</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><code>App.vue</code>와 router의 <code>index.js</code>이다. <code>router-link</code>로 누르면 라우팅이 가능한 버튼을 만들어 준다. to속성에 <code>/todo</code>로 값을 주고 <code>router/index.js</code>에 <code>/todo</code>로 라우팅 하는 경우 어느 컴포넌트로 가야할지 정의해 준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// views/TodoView.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Todo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">todo-header</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">todo-input</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">todo-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TodoHeader</span> <span class="keyword">from</span> <span class="string">&quot;../components/todo/TodoHeader.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TodoInput</span> <span class="keyword">from</span> <span class="string">&quot;../components/todo/TodoInput.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TodoList</span> <span class="keyword">from</span> <span class="string">&quot;../components/todo/TodoList.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TodoFooter</span> <span class="keyword">from</span> <span class="string">&quot;../components/todo/TodoFooter.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;TodoView&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TodoHeader</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TodoInput</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TodoList</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TodoFooter</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>&#x2F;todo로 라우팅을 하게 되면 TodoView라는 컴포넌트를 띄우게 된다. TodoView.vue의 코드이다. view 파일은 views 폴더에 추가하면 된다. TodoView에도 4개의 컴포넌트를 추가하여 페이지를 띄우게 된다.</p><p>view에 추가되는 컴포넌트들은 component 폴더에 추가하게 되며, component&#x2F;todo 폴더에 각 컴포넌트들이 정의된다.</p><h2 id="할-일-추가하기"><a href="#할-일-추가하기" class="headerlink" title="할 일 추가하기"></a>할 일 추가하기</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/todo/TodoInput.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todoInput&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-model</span>=<span class="string">&quot;job&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">placeholder</span>=<span class="string">&quot;할 일&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">keyup.enter</span>=<span class="string">&quot;addTodo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;TodoInput&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">job</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// enter action 이후 초기화</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> item = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">done</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">job</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;addTodo&quot;</span>, item); <span class="comment">// emit(&quot;호출할 이벤트 이름&quot;, 값)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">job</span> = <span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>할 일 추가를 위한 <code>TodoInput.vue</code>이다. input 태그를 만들어 준다. input 태그에 할 일을 입력 후 엔터를 누르면 할 일 목록에 추가되게 할 것이다.</p><p>input 태그에 입력한 값을 처리하기 위해 <code>data()</code>에 job을 빈 문자열로 선언해 주고, input 태그의 <code>v-model</code>에 job을 할당한다.</p><p>Enter 키를 이용해 할 일을 추가 하기 위해 input 태그에 <code>@keyup.enter=””</code> 속성을 주고 동작할 함수의 이름을 넣어준다. 함수는 <code>addTodo</code>를 사용한다. 할 일은 done과 text 속성을 가진 객체로 생성된다. item을 객체로 정의해 주고 text에는 <code>this.job</code>으로 입력한 값을 받아온다.</p><p><code>$emit</code>은 값을 부모로 보내주는 역할을 하고 인자는 <code>emit(”호출할 이벤트 이름”, “값”)</code>이 된다. 전달한 후 job을 초기화 해준다.</p><h2 id="할-일-리스트-확인하기"><a href="#할-일-리스트-확인하기" class="headerlink" title="할 일 리스트 확인하기"></a>할 일 리스트 확인하기</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// views/TodoView.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Todo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">todo-header</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">todo-input</span> @<span class="attr">addTodo</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">:todos</span>=<span class="string">&quot;todos&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">todo-footer</span> <span class="attr">:todos</span>=<span class="string">&quot;todos&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TodoHeader</span> <span class="keyword">from</span> <span class="string">&quot;../components/todo/TodoHeader.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TodoInput</span> <span class="keyword">from</span> <span class="string">&quot;../components/todo/TodoInput.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TodoList</span> <span class="keyword">from</span> <span class="string">&quot;../components/todo/TodoList.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">TodoFooter</span> <span class="keyword">from</span> <span class="string">&quot;../components/todo/TodoFooter.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;TodoView&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TodoHeader</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TodoInput</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TodoList</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">TodoFooter</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">todos</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">addTodo</span>(<span class="params">item</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">push</span>(item);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>todo-input</code> 태그의 <code>@addTodo</code>는 emit된 것을 받아오게 된다. <code>TodoInput.vue</code>에서 done과 text가 담긴 객체를 emit 해 주었다. 그렇게 부모 컴포넌트로 전달된 값을 사용할 수 있다. <code>methods</code>의 <code>addTodo</code>의 인자로 emit된 값을 받을 수 있고, <code>data()</code>에 선언되어 있는 <code>todos</code>배열에 추가할 수 있게된다.</p><p>todos는 다시 자식 컴포넌트로 보낼 수 있는데 <code>todo-list</code> 에 <code>:todos=”todos”</code>를 사용해서 값을 보낼 수 있다. <code>v-bind</code> 키워드를 사용해도 된다. 형식은 <em>:props이름&#x3D;”전달데이터”</em> 이다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/todo/TodoList.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;todoList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;item.done&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; donestyle: item.done &#125;&quot;</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;TodoList&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;todos&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.donestyle</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">text-decoration</span>: line-through;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">color</span>: gray;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>부모 컴포넌트에서 넘어온 값을 props를 이용해 받게 된다. 부모 컴포넌트에서 todos로 이름을 전달 받았기 때문에 자식 컴포넌트에서 <code>“todos”</code>로 받아준다.</p><p>props로 받은 배열을 div 태그를 통해 보여줄 것이다. <code>v-for</code> 키워드를 사용해서 반복문을 사용할 수 있다. <code>item.</code>으로 값을 가져올 수 있다. 체크박스를 <code>v-model</code>을 사용해 각 할 일들의 값을 연결해 준다. 스타일 지정에도 <code>item.done</code>으로 사용해서 체크 시(item.done&#x3D;&#x3D;true)인 경우 스타일이 동작하게 된다.</p><h2 id="할-일-진행-정도-확인"><a href="#할-일-진행-정도-확인" class="headerlink" title="할 일 진행 정도 확인"></a>할 일 진행 정도 확인</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/todo/TodoFooter.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;todoList&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; doneCnt &#125;&#125; / &#123;&#123; todos.length &#125;&#125; 건 처리<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;TodoList&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;todos&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">doneCnt</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">todos</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> item.<span class="property">done</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;).<span class="property">length</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>views&#x2F;TodoView.vue에서 props를 받아와 사용한다. 할 일의 처리 정도를 나타낸다. computed에 doneCnt 메서드를 정의해서 상태가 변할때마다 동작하게 만들어 준다.</p><p>doneCnt는 todos 배열에서 item.done이 true인 것의 개수를 반환해 준다.</p>]]></content>
    
    
    <summary type="html">Todo를 vue로 만들어 보자(vue cli)</summary>
    
    
    
    <category term="vue" scheme="https://nowgnastack.github.io/categories/vue/"/>
    
    
    <category term="vue javascript todo" scheme="https://nowgnastack.github.io/tags/vue-javascript-todo/"/>
    
  </entry>
  
  <entry>
    <title>TCPIP 4계층 / Transport 계층 TCP, UDP</title>
    <link href="https://nowgnastack.github.io/2022/11/09/2022-11-09-tcpudp/"/>
    <id>https://nowgnastack.github.io/2022/11/09/2022-11-09-tcpudp/</id>
    <published>2022-11-09T00:58:00.000Z</published>
    <updated>2023-07-23T15:21:43.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Transport-계층"><a href="#Transport-계층" class="headerlink" title="Transport 계층"></a>Transport 계층</h2><p>TCP&#x2F;IP 4계층의 transport 계층은 OSI 7계층에서 transport 계층과 같다</p><p>TCP, UDP가 대표적이며 애플리케이션 계층에서 받은 메세지를 기반으로 세그먼트 또는 데이터그램으로 데이터를 쪼개고 데이터가 오류없이 순서대로 전달되도록 도움을 주는 층이다.</p><p>TCP는 20~60바이트로 가변적이고, UDP는 8바이트 고정 길이를 갖는다.</p><h2 id="TCP-Transmission-Control-Protocol"><a href="#TCP-Transmission-Control-Protocol" class="headerlink" title="TCP(Transmission Control Protocol)"></a>TCP(Transmission Control Protocol)</h2><ul><li>연결 지향 방식</li><li>높은 신뢰성 보장</li><li>연결에 3 way handshake 사용</li><li>해제에 4 way handshake 사용</li><li>full-duplex(전이중 통신 방식), point-to-point(점대점) 방식</li><li>흐름 제어와 혼잡제어를 제공</li></ul><h3 id="가상-회선-패킷-교환-방식"><a href="#가상-회선-패킷-교환-방식" class="headerlink" title="가상 회선 패킷 교환 방식"></a>가상 회선 패킷 교환 방식</h3><p><img src="/images/posting/network/tcpudp/tcpudp/pic1.png" alt="스크린샷 2022-11-08 오전 1.00.04.png"></p><p>각 패킷에 가상회선 식별자가 포함되며, 모든 패킷을 전송하면 가상회선이 해제되고 패킷들은 전송된 순서대로 도착하는 방식이다.</p><p>데이터의 전송은 패킷 단위로 목적지까지 전송된다. 순서대로 받아야 할 데이터 패킷에 번호를 붙이고 순차적으로 도착하게 한다.<br>패킷에 번호를 붙이면 패킷 분실을 확인하고 목적지에서 패킷들을 순서에 따라 재조립한다.</p><h3 id="Numbering-System-번호화-시스템"><a href="#Numbering-System-번호화-시스템" class="headerlink" title="Numbering System(번호화 시스템)"></a>Numbering System(번호화 시스템)</h3><h4 id="TCP-Segment-Header"><a href="#TCP-Segment-Header" class="headerlink" title="TCP Segment Header"></a>TCP Segment Header</h4><p><img src="/images/posting/network/tcpudp/tcp/pic2.png"></p><p><a href="http://www.ktword.co.kr/test/view/view.php?m_temp1=1889">정보통신기술용어해설</a></p><p>번호화 시스템은 모든 데이터에 바이트 번호를 부여한다. 송신 순서 번호와 확인 응답 번호를 가진다. 세그먼트에 있는 첫 번째 바이트에 송신 순서 번호를 할당하고, 확인 응답 번호는 자신이 수신하기를 기대하는 다음 바이트 번호이다. TCP segment의 Sequence number이다.</p><h3 id="Flow-Control-흐름-제어"><a href="#Flow-Control-흐름-제어" class="headerlink" title="Flow Control(흐름 제어)"></a>Flow Control(흐름 제어)</h3><p>흐름제어는 송신측과 수신측의 데이터 처리 속도 차이를 해결하기 위한 기법이다. 수신측에는 패킷을 수신 받는 버퍼의 크기가 정해져 있다. 송신측의 전송 속도가 빨라 수신측 버퍼에 패킷이 쌓이게 된다면 버퍼가 가득 차 손실되는 패킷이 발생한다. 수신측이 송신측에 자신의 상태를 계속 알리는 방식으로 흐름제어를 수행한다. 데이터를 더 받을 준비가 되었다는 상태를 송신측에 전달한 경우 송신측에서 패킷을 보내도록 동작한다.</p><p>흐름제어 기법에는 두 가지가 있다. Stop-and-Wait(정지-대기)와 Sliding-Window(슬라이딩 윈도우)기법이다.</p><h4 id="Stop-and-Wait"><a href="#Stop-and-Wait" class="headerlink" title="Stop-and-Wait"></a>Stop-and-Wait</h4><p>정지-대기 기법은 말 그대로 매번 전송한 패키에 대해 응답을 받아야 다음 패킷을 전송할 수 있는 방법이다. 구조는 간단하지만 많은 데이터를 전송하기에 비효율적이다.</p><h4 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h4><p>Stop-and-Wait 기법의 비효율성을 개선한 기법으로, 수신 측에서 설정한 윈도우 크기만큼 송신 측에서 확인 응답 없이 세그먼트를 전송할 수 있게 하여 데이터 흐름을 동적으로 조절하는 기법이다.</p><p>수신측이 한번에 처리하지 못하는 양의 데이터를 계속 받게 되면 전달되지 않는 패킷이 발생하게 된다. 이런 데이터 유실이 발생하지 않도록 패킷의 양을 조절하는 것이 sliding window 기법이다.</p><h3 id="Error-Control-오류-제어"><a href="#Error-Control-오류-제어" class="headerlink" title="Error Control(오류 제어)"></a>Error Control(오류 제어)</h3><p>tcp 프로토콜은 통신 중 오류가 발생하면 데이터를 재전송한다. tcp 프로토콜은 ARQ(Automatic Repeat Request)를 사용해 오류제어를 한다.</p><h4 id="stop-and-wait"><a href="#stop-and-wait" class="headerlink" title="stop and wait"></a>stop and wait</h4><p>ARQ(검출 후 재전송)방식의 일종으로 송신측에서 1개의 프레임을 송신, 수신측에서 프레임 에러 유무를 판단하여 ACK나 NAK을 전송한다. 수신측으로 부터 NAK을 수신하거나, 일정 시간까지 ACK나 NAK을 수신하지 받지 못하면 에러로 간주하여 해당 프레임을 재전송한다.</p><h4 id="Go-Back-N"><a href="#Go-Back-N" class="headerlink" title="Go Back N"></a>Go Back N</h4><p>연속적 ARQ라고도 하며 연속적으로 데이터를 보내고 오류가 발생한 지점부터 재전송 하는 방법이다. 일정 윈도우 크기 이내에서 한번에 여러 패킷을 송신하고, 이들 패킷에 대하여 단지 한 번의 ACK로 수신을 확인한다. 오류가 발생한 데이터부터 다시 재전송하기 때문에 성공한 데이터까지 다시 보내야 하므로 비효율적이다.</p><h4 id="Selective-Repeat"><a href="#Selective-Repeat" class="headerlink" title="Selective Repeat"></a>Selective Repeat</h4><p>오류가 난 데이터만 재전송하는 방식이다. 오류가 발생한 데이터만 전송하는 부분에서 효율적일 수 있지만, 수신측의 버퍼 데이터가 순차적이지 않다는 단점이 있다.</p><h3 id="Congestion-Control-혼잡-제어"><a href="#Congestion-Control-혼잡-제어" class="headerlink" title="Congestion Control(혼잡 제어)"></a>Congestion Control(혼잡 제어)</h3><p>네트워크 내에 패킷의 수가 과도하게 증가하는 현상을 제어하는 기능을 혼잡제어라고 한다.</p><h4 id="AIMD-Additive-Increase-Mutipleicative-Decrease"><a href="#AIMD-Additive-Increase-Mutipleicative-Decrease" class="headerlink" title="AIMD(Additive Increase &#x2F; Mutipleicative Decrease)"></a>AIMD(Additive Increase &#x2F; Mutipleicative Decrease)</h4><p><img src="/images/posting/network/tcpudp/tcp/pic3.png" alt="스크린샷 2022-10-23 오후 2.17.12.png"></p><p><a href="https://gyoogle.dev/blog/computer-science/network/%ED%9D%90%EB%A6%84%EC%A0%9C%EC%96%B4%20&%20%ED%98%BC%EC%9E%A1%EC%A0%9C%EC%96%B4.html">Tech Interview</a></p><p>패킷을 하나씩 보내고 문제없이 도착하면 윈도우 크기를 1씩 증가시키며 전송하는 기법이다. 패킷 전송에 실패하거나 일정 시간을 넘어가게되면, 패킷 전송 속도를 절반으로 줄인다. 초기에 네트워크가 혼잡해 지는 상황을 미리 감지하지 못하는 단점이 있다. 네트워크가 혼잡해지면 대역폭을 줄이는 방식이다.</p><h4 id="Slow-Start"><a href="#Slow-Start" class="headerlink" title="Slow Start"></a>Slow Start</h4><p>AIMD와 동일하게 패킷을 하나씩 보내면서 시작하고, 문제없이 도착하면 윈도우 크기를 1씩 늘려간다. 전송 속도는 지수 함수 형태로 증가한다. 네트워크에서 혼잡이 발생하면 윈도우 크기를 1로 떨어뜨린다.</p><p>초기 네트워크 수용량을 예상할 수 있는 정보가 없지만, 혼잡이 한번 발생하고 나면 네트워크 수용량을 예상할 수 있다. 혼잡이 발생한 윈도우 크기의 절반까지는 지수 함수 형태로 윈도우 크기를 증가 시키고 그 이후 부터는 1씩 증가시키는 특징을 가지고 있다.</p><h4 id="Fast-Retransmit"><a href="#Fast-Retransmit" class="headerlink" title="Fast Retransmit"></a>Fast Retransmit</h4><p>빠른 재전송은 TCP 프로토콜의 혼잡 제어에 추가된 정책으로 패킷을 받는 쪽에서 먼저 도착할 패킷이 도착하지 않고 다음 패킷이 도착한 경우에도 ACK 응답 패킷을 보내게 된다. 순서대로 잘 도착한 마지막 패킷의 순번을 ACK에 보내게 되고, 중간 패킷 하나가 손실되게 되면 송신측에서는 순번이 중복된 ACK 패킷을 받게 된다. 중복된 패킷임을 확인하게되면 문제가 되는 순번의 패킷을 재전송해준다. 이 과정에서 중복된 순버의 패킷 3개를 받게 되면 재전송을 하게된다. 또한 혼잡을 감지하고 윈도우 크기를 줄인다.</p><h4 id="Fast-Recovery"><a href="#Fast-Recovery" class="headerlink" title="Fast Recovery"></a>Fast Recovery</h4><p>빠른 회복 기법은 혼잡 상태가 되면 윈도우 크기를 반으로 줄이고 선형 증가 시키는 방법이다. 이 방법은 혼잡 상황을 겪게되면 이후에는 AIMD 기법으로 동작하게 된다.</p><h3 id="TCP-Tahoe"><a href="#TCP-Tahoe" class="headerlink" title="TCP Tahoe"></a>TCP Tahoe</h3><p><img src="https://user-images.githubusercontent.com/55802893/200699098-697d0d37-832c-4e90-b18f-7468043e164a.png"></p><ul><li>초기 윈도우 크기는 1 MSS(MSS: TCP 최대 세그먼트 크기)</li><li>임계점 까지느 slow start를 사용(윈도우 사이즈 2배씩 증가)</li><li>임계점부터 AIMD 방식을 사용(윈도우 사이즈 1씩 증가)</li><li>3 duplicate ACK나 timeout을 만나게 되면 임계점을 윈도우 사이즈의 절반으로 줄이고 윈도우 사이즈를 1로 줄인다</li></ul><h3 id="TCP-Reno"><a href="#TCP-Reno" class="headerlink" title="TCP Reno"></a>TCP Reno</h3><p><img src="https://user-images.githubusercontent.com/55802893/200699112-d57c178c-ebcc-43eb-9d36-f3e28db4a053.png"></p><p>Tahoe 방식은 3 duplicate ACK를 만나고 윈도우 사이즈가 다시 1부터 시작되어 속도가 느린 것을 해결 할 수 있는 방법이 Reno 이다</p><ul><li>초기 윈도우 사이즈는 1 MSS</li><li>임계점까지 slow start를 사용(윈도우 사이즈 2배씩 증가)</li><li>임계점부터 AIMD 방식을 사용(윈도우 사이즈 1씩 증가)</li><li>3 duplicate ACK를 만나면 윈도우 사이즈를 절반으로 줄이고 임계점을 그 값으로 설정</li><li>timeout 을 만나게되면 윈도우 사이즈를 1로 줄임 이 때 임계점은 변화하지 않는다</li></ul><blockquote><p>TCP Tahoe, reno: <a href="https://code-lab1.tistory.com/30">코드 연구소</a></p></blockquote><hr><h2 id="UDP-User-Datagram-Protocol"><a href="#UDP-User-Datagram-Protocol" class="headerlink" title="UDP(User Datagram Protocol)"></a>UDP(User Datagram Protocol)</h2><ul><li>비연결형 서비스로 데이터그램 방식을 제공</li><li>정보를 주고 받을 때 정보를 보내거나 받는다는 신호 절차를 거치지 않음</li><li>UDP 헤더의 체크섬 필드를 통해 최소한의 오류를 검출</li><li>신뢰성이 낮음</li><li>TCP보다 빠른 속도</li></ul><h3 id="데이터그램-패킷-교환-방식"><a href="#데이터그램-패킷-교환-방식" class="headerlink" title="데이터그램 패킷 교환 방식"></a>데이터그램 패킷 교환 방식</h3><p><img src="/images/posting/network/tcpudp/tcpudp/pic2.png" alt="스크린샷 2022-11-08 오전 1.01.56.png"><br>데이터그램 패킷 교환 방식은 패킷이 독립적으로 이동하며 최적의 경로를 선택하여 간다. 하나의 메세지에서 분할 된 여러 패킷은 서로 다른 경로로 전송될 수 있으며 도착한 순서가 다를 수 있는 방식이다.</p><p>TCP 방식처럼 패킷을 재조립하거나 흐름제어와 혼잡 제어 기능이 없기 때문에 TCP 보다 빠르고 이런 특징은 신뢰성보다 연속성이 중요한 실시간 스트리밍 서비스에 사용된다</p><h2 id="TCP와-UDP-비교-한-눈에-보기"><a href="#TCP와-UDP-비교-한-눈에-보기" class="headerlink" title="TCP와 UDP 비교 한 눈에 보기"></a>TCP와 UDP 비교 한 눈에 보기</h2><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>연결 방식</td><td>연결지향 서비스</td><td>비연결 서비스</td></tr><tr><td>패킷 교환 방식</td><td>가상 회선 방식</td><td>데이터그램 방식</td></tr><tr><td>전송 순서</td><td>전송 순서 보장</td><td>전송 순서가 변경될 수 있음</td></tr><tr><td>수신 여부 확인</td><td>수신 여부 확인</td><td>수신 여부 확인 하지 않음</td></tr><tr><td>통신 방식</td><td>1:1 통신</td><td>1:1 or 1:N or N:N 통신</td></tr><tr><td>신뢰성</td><td>높음</td><td>낮음</td></tr><tr><td>속도</td><td>느림</td><td>빠름</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">tcp/ip 4계층의 transport 계층을 알아본다(tcp, udp)</summary>
    
    
    
    <category term="network" scheme="https://nowgnastack.github.io/categories/network/"/>
    
    
    <category term="network tcp udp" scheme="https://nowgnastack.github.io/tags/network-tcp-udp/"/>
    
  </entry>
  
  <entry>
    <title>너무 헷갈리는 동기와 비동기 알아보기</title>
    <link href="https://nowgnastack.github.io/2022/10/31/2022-11-01-asynccontroller/"/>
    <id>https://nowgnastack.github.io/2022/10/31/2022-11-01-asynccontroller/</id>
    <published>2022-10-31T14:50:00.000Z</published>
    <updated>2023-07-23T15:21:35.139Z</updated>
    
    <content type="html"><![CDATA[<p>웹 페이지에서는 동기적 동작과 비동기적 동작이 발생할 수 있다. 이번 포스팅에서는 spring boot를 이용해 동기와 비동기 동작에 대해 알아본다.</p><h2 id="Synchronous"><a href="#Synchronous" class="headerlink" title="Synchronous"></a>Synchronous</h2><p>동기적 방식은 하나의 요청이 발생하고 해당 요청이 끝나기 전까지 다른 작업을 할 수 없는 방식이다. 하나의 요청에서 응답이 온 후 다음 요청을 보낼 수 있다.</p><h2 id="Asynchronous"><a href="#Asynchronous" class="headerlink" title="Asynchronous"></a>Asynchronous</h2><p>비동기적 방식은 여러개의 요청을 동시에 처리가 가능하다. 하나의 요청이 끝나기 전 다른 요청을 할 수 있다. 요청이 발생한 후 다른 작업을 하다가 요청한 작업이 종료되면 이후의 작업을 진행하게 된다.</p><p>이제 spring boot에서 동기와 비동기 동작을 간단하게 알아본다. 요청에서 동기와 비동기를 나누는 기준은 client가 요청하는 방식에 따라 나눠진다. Form을 사용한 요청은 동기적 방식이며, fetch나 axios를 사용하여 요청하는 방식은 비동기적 방식이다. 아래 예제에서는 form과 fetch를 사용해서 Controller와 RestController로 요청하여 응답이 어떻게 이뤄지는지 확인한다.</p><h2 id="Synchronous-request"><a href="#Synchronous-request" class="headerlink" title="Synchronous request"></a>Synchronous request</h2><h3 id="Controller로-요청하기"><a href="#Controller로-요청하기" class="headerlink" title="Controller로 요청하기"></a>Controller로 요청하기</h3><p>Form으로 요청하는 방식이 동기적 방식이다. Form 태그는 Http 메소드를 명시하여 요청한다. GET과 POST 방식으로 설정하여 요청할 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--동기 동작 Controller --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>sync form controller jsp로 넘어감<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  id <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> /&gt;</span> pw <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;pw&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sync action&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;pw&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;hello controller&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>먼저 Controller로 요청하는 동기적 방식이다. Controller 클래스에는 @Controller 어노테이션이 붙어있다. Form에서 “&#x2F;hello”로 요청을 하게되면 Map에 id와 pw가 담겨 @RequestParam으로 넘어온다. 시스템 출력을 확인해보면 다음과 같다. Form에는 id에 id, pw에 1234를 넣어줬다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">1234</span><br><span class="line">hello controller</span><br></pre></td></tr></table></figure><p><img src="/images/posting/spring/async/pic1.png" alt="스크린샷 2022-11-01 오전 1.11.31.png"></p><p>시스템 출력에는 위와 같이 출력되며 출력된 후 <code>return “hello”</code>를 통해 <code>webapp/WEB-INF/views</code>에 있는 hello.jsp가 호출된다. 개발자 도구를 확인해보면 hello.jsp와 동일한 구조를 가진 페이지가 보여지게 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--hell.jsp--%&gt; &lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RestController로-요청하기"><a href="#RestController로-요청하기" class="headerlink" title="RestController로 요청하기"></a>RestController로 요청하기</h3><p>동기적 방식에서 RestController로 요청하는 경우를 알아본다. POST 방식으로 요청하여 확인해 본다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--동기 동작 RestController --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/syncrest&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>sync form restcontroller 문자열만 화면에 나옴<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  id <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> /&gt;</span> pw <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;pw&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sync action&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;syncrest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">resthello</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;hello rest controller&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello REST&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RestController로 요청하는 동기적 방식이다. Controller 클래스에는 @RestController 어노테이션이 붙어 있다. RestController는 Controller와 ResponseBody가 포함되어 있는 어노테이션이다.</p><p>Form에서 “&#x2F;syncrest”로 post요청을 하게되면 @RequestParam으로 map 형태로 받아온다. 시스템 출력을 확인해보면 아래와 같다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">hello rest controller</span><br></pre></td></tr></table></figure><p><img src="/images/posting/spring/async/pic2.png" alt="스크린샷 2022-11-01 오전 1.31.41.png"></p><p>RestController형태이므로 반환되는 형태는 html body가 반환된다. 개발자 도구를 확인해 보면 body 태그 안에 반환되는 문자열이 출력된다.</p><p>동기적 방식으로 Controller와 RestController로 요청한 결과를 알아보았다.</p><h2 id="Asynchronous-request"><a href="#Asynchronous-request" class="headerlink" title="Asynchronous request"></a>Asynchronous request</h2><h3 id="Controller로-요청하기-1"><a href="#Controller로-요청하기-1" class="headerlink" title="Controller로 요청하기"></a>Controller로 요청하기</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>controller async<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">async id<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;asyncid&quot;</span> /&gt;</span> async pw<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;asyncpw&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;asyncBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;async&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#asyncBtn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#asynccontrollerid&quot;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">let</span> pw = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#asynccontrollerpw&quot;</span>).<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; id, pw &#125;),</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;asynccontroller&quot;</span>, data);</span><br><span class="line">  data = <span class="keyword">await</span> data.<span class="title function_">text</span>();</span><br><span class="line">  <span class="title function_">alert</span>(data); <span class="comment">// return 값은 &quot;hello&quot;이고 alert 창에 hello.jsp가 보이게 된다.</span></span><br><span class="line">  data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="comment">// alert(data);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;asynccontroller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">helloworld</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;pw&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;hello controller&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>비동기 동작은 fetch나 axios를 사용하여 요청한다. 위 코드는 비동기 방식으로 Controller로 요청하는 경우이다. fetch를 사용해 post 방식으로 요청을 보낸다. Fetch 요청을 한 후 응답을 alert에 띄우기 위해 async 함수를 사용하고 요청에 await을 붙여준다. await을 붙여줘 fetch가 끝날 때 까지 기다린다. await가 붙지 않으면 fetch 요청이 끝나기 전에 다음 줄이 수행되므로 data에 값이 없게 된다.</p><p>Java코드를 보게되면 요청을 받은 후 반환하는 값이 문자열이다. Controller에서 반환되는 값은 jsp의 파일 이름인 것을 위에서 보았다. Controller로 요청되는 비동기 동작에서 fetch가 요청한 후 받게되는 응답은 hello.jsp를 html 텍스트로 받게 된다.</p><p>위 javascript 코드에서 alert 창에 띄워지는 데이터는 hello.jsp가 띄워진다. (hello.jsp 코드는 동기적 방식에 있다.)</p><p><img src="/images/posting/spring/async/pic3.png" alt="스크린샷 2022-11-01 오전 2.02.18.png"></p><h3 id="RestController로-요청하기-1"><a href="#RestController로-요청하기-1" class="headerlink" title="RestController로 요청하기"></a>RestController로 요청하기</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>restcontroller async<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">async id<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;asynccontrollerid&quot;</span> /&gt;</span> async pw<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;asynccontrollerpw&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;asyncControllerBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;async&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#asyncControllerBtn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#asynccontrollerid&quot;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">let</span> pw = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#asynccontrollerpw&quot;</span>).<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; id, pw &#125;),</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;resthello&quot;</span>, data);</span><br><span class="line">  data = <span class="keyword">await</span> data.<span class="title function_">text</span>();</span><br><span class="line">  <span class="title function_">alert</span>(data); <span class="comment">// return 값인 hello가 온다</span></span><br><span class="line">  data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="comment">// alert(data);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;resthello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;hello rest controller&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>비동기 동작으로 RestController에 요청하는 방식을 알아보자. Fetch 동작은 Controller에 요청하는 것과 같다.</p><p>RestController의 “&#x2F;resthello”로 요청이 들어오게되고, 반환되는 값은 hello이다. RestController는 html body를 반환하기 때문에 아래와 같은 결과가 나오게 된다.</p><p><img src="/images/posting/spring/async/pic4.png" alt="스크린샷 2022-11-01 오전 2.07.32.png"></p><p>Fetch 동작이 끝난 후 alert 창에 data를 띄워보면 RestController에서 반환된 “hello”가 출력되는 것을 알 수 있다.</p><p>다시한번 정리하면 동기와 비동기 동작을 나눌 수 있는 것은 client의 요청 방식에 따라 달라지게 되고, Controller와 RestController의 반환되는 타입에 따라 jsp페이지가 넘어가거나 html body가 응답으로 넘어가게 된다.</p>]]></content>
    
    
    <summary type="html">spring boot로 웹 페이지의 동기와 비동기 동작의 차이를 알아본다</summary>
    
    
    
    <category term="spring-boot" scheme="https://nowgnastack.github.io/categories/spring-boot/"/>
    
    
    <category term="web async spring-boot sync" scheme="https://nowgnastack.github.io/tags/web-async-spring-boot-sync/"/>
    
  </entry>
  
  <entry>
    <title>AOP를 이용한 예외처리 분리하기</title>
    <link href="https://nowgnastack.github.io/2022/10/26/2022-10-26-aopexception/"/>
    <id>https://nowgnastack.github.io/2022/10/26/2022-10-26-aopexception/</id>
    <published>2022-10-26T11:23:00.000Z</published>
    <updated>2023-07-23T15:21:27.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AOP-Aspect-Oriented-Programming"><a href="#AOP-Aspect-Oriented-Programming" class="headerlink" title="AOP (Aspect Oriented Programming)"></a>AOP (Aspect Oriented Programming)</h2><p>AOP는 관점지향 프로그래밍으로 로직을 기준으로 핵심 관점과 부과적인 관점으로 나눠서 보고 그 관점을 기준으로 각각을 모듈화 하는 것이다.</p><p>핵심 기능은 비즈니스 로직을 구현하는 과정에서 비즈니스 로직이 처리하려는 목적 기능을 말한다. 클라이언트로부터 상품 정보 등록 요청을 받아 DB에 저장하고, 상품 정보를 조회하는 비즈니스 로직을 구현할 경우, 정보를 저장하는 것과 정보 데이터를 보여주는 부분이 핵심이다.</p><p>클래스들은 Aspect를 재활용하여 사용할 수 있다. Service 비즈니스 로직에서 트랜잭션이라는 부가 기능 관심사를 분리할 수 있다.</p><p>이번 포스팅에서는 AOP를 이용해 웹 서비스에서 발생하는 예외를 처리해 본다.</p><h2 id="사용자-정의-예외처리"><a href="#사용자-정의-예외처리" class="headerlink" title="사용자 정의 예외처리"></a>사용자 정의 예외처리</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GlobalExceptionHandler.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">NullPointerException</span><span class="params">(NullPointerException n)</span> &#123;</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="number">404</span>, n.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(response, HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLSyntaxErrorException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">SqlSyntaxErrorException</span><span class="params">(SQLSyntaxErrorException s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sql syntax error&quot;</span>);</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="number">404</span>, s.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(response, HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BadSqlGrammarException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">BadSqlGrammarException</span><span class="params">(BadSqlGrammarException b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;bad grammar&quot;</span>);</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="number">404</span>, b.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(response, HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Exception</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sql grammar error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(RuntimeException.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">RuntimeException</span><span class="params">(RuntimeException r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run time exception&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;run time exception&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GlobalExceptionHandler.java</code>이다. 발생할 수 있는 예외들을 정의해 놓은 파일이다. ControllerAdvice 어노테이션으로 모든 controller에 대한 예외를 처리해 준다. 각 메서드에는 ExceptionHandler 어노테이션이 붙어 있다. ExceptionHandler는 어떤 예외 클래스에 대한 처리를 할지 정의해 주는 것이다. ExceptionHandler로 예외 클래스를 지정해 주기 때문에 각 메서드들의 이름은 큰 의미가 없다. 웹 서비스에서 일부러 예외를 발생시켜 확인해 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ErrorResponse.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorResponse</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ErrorResponse</span><span class="params">(<span class="type">int</span> i, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = i;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 <code>GlobalExceptionHandler.java</code>에서 사용하는 <code>ErrorResponse</code> 객체이다.</p><h3 id="BadSqlGrammarException"><a href="#BadSqlGrammarException" class="headerlink" title="BadSqlGrammarException"></a>BadSqlGrammarException</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Member&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from member_</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line">      and pw = #&#123;pw&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 코드는 mybatis(mybatis 설명은 생략한다)로 정의한 사용자 로그인 쿼리이다. <code>from member</code>가 올바른 쿼리이며, <code>member_</code>로 쿼리에서 오류를 발생시켜보았다. 로그인 요청을 하게되면 BadSqlGrammarException이 발생하게 된다.</p><p><img src="/images/posting/spring/aop/pic1.png" alt="스크린샷 2022-10-26 오후 8.46.10.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(BadSqlGrammarException.class)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">BadSqlGrammarException</span><span class="params">(BadSqlGrammarException b)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;bad grammar&quot;</span>);</span><br><span class="line">    <span class="type">ErrorResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="number">404</span>, b.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(response, HttpStatus.BAD_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ExceptionHandler에 예외 클래스를 정의해 준다. ErrorResponse 객체로 오류 발생 시 반환할 객체를 생성하고 ResponseEntity로 반환해 준다.</p><p><img src="/images/posting/spring/aop/pic2.png" alt="스크린샷 2022-10-26 오후 8.40.22.png"><br>postman으로 로그인 요청을 보낸 후 받은 응답 body이다. 요청에 대한 응답은 ErrorResponse 객체를 받은 것을 확인할 수 있다. errors와 code는 정의하지 않아 null로 반환되었다. 코드 위쪽의 이미지에서 BadSqlGrammarException이 콘솔에 찍혀 있는것을 확인할 수 있다.</p><h3 id="NullPointerException"><a href="#NullPointerException" class="headerlink" title="NullPointerException"></a>NullPointerException</h3><p>다시 사용자 로그인을 사용해 NullPointerException을 발생시켜 본다. 위에서 로그인 쿼리는 다시 되돌려 놓는다. 이번에는 데이터베이스에 존재하지 않는 정보로 로그인을 시도한다.</p><p><img src="/images/posting/spring/aop/pic3.png" alt="스크린샷 2022-10-26 오후 8.54.17.png"><br>id가 p이고 pw가 1234인 사용자는 데이터에 존재하지 않는다. 이 데이터를 가지고 로그인 요청을 하게되면 NullPointerException이 발생한다.</p><p><img src="/images/posting/spring/aop/pic4.png" alt="스크린샷 2022-10-26 오후 8.56.41.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">NullPointerException</span><span class="params">(NullPointerException n)</span> &#123;</span><br><span class="line">    n.printStackTrace();</span><br><span class="line">    <span class="type">ErrorResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="number">404</span>, n.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(response, HttpStatus.BAD_REQUEST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ExceptionHandler에 NullPointerException으로 예외 클래스를 정의해 준다. 데이터베이스에 존재하지 않는 사용자이므로 NullPointerException가 발생하는 것을 볼 수 있다. ErrorResponse로 응답 객체를 만들고 ResponseEntity로 json 형태로 반환하게 되면 다음과 같은 응답을 얻을 수 있다.</p><p><img src="/images/posting/spring/aop/pic5.png" alt="스크린샷 2022-10-26 오후 8.58.56.png"><br>에러의 메세지와 지정해준 상태 코드가 담겨 응답으로 반환된다. errors와 code 데이터는 추가하지 않아 null을 반환하게 된다.</p><p>AOP를 이용해서 controller에 클래스에 따른 예외처리를 적용해 보았다. 핵심 기능과 부가 기능으로 구분해서 각각을 하나의 관점으로 본다는 AOP의 관점을 조금 이해할 수 있었던 예제였다.</p>]]></content>
    
    
    <summary type="html">AOP를 이용해서 예외처리를 사용자가 정의하여 분리한다</summary>
    
    
    
    <category term="spring-boot" scheme="https://nowgnastack.github.io/categories/spring-boot/"/>
    
    
    <category term="spring-boot aop exception java" scheme="https://nowgnastack.github.io/tags/spring-boot-aop-exception-java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot와 React를 사용해 웹 서비스 개발하기</title>
    <link href="https://nowgnastack.github.io/2022/10/22/2022-10-22-springboot1/"/>
    <id>https://nowgnastack.github.io/2022/10/22/2022-10-22-springboot1/</id>
    <published>2022-10-22T04:00:00.000Z</published>
    <updated>2023-07-23T15:21:14.931Z</updated>
    
    <content type="html"><![CDATA[<p>Spring boot 와 react를 사용하여 웹 서비스를 개발해 보려고 한다. spring boot에 관견된 내용은 스프링 부트 핵심 가이드 책을 참고하였다.</p><h2 id="기술-스택"><a href="#기술-스택" class="headerlink" title="기술 스택"></a>기술 스택</h2><table><thead><tr><th align="center">name</th><th align="center">version</th><th></th></tr></thead><tbody><tr><td align="center">Yarn</td><td align="center">1.22.18</td><td></td></tr><tr><td align="center">Spring Boot</td><td align="center">2.5.6</td><td></td></tr><tr><td align="center">React</td><td align="center">18.2.0</td><td></td></tr><tr><td align="center">MYSQL</td><td align="center">8.x</td><td></td></tr><tr><td align="center">Intellij</td><td align="center"></td><td>server</td></tr><tr><td align="center">Vscode</td><td align="center"></td><td>client</td></tr></tbody></table><p>이번 포스팅에서는 client와 server의 간단한 연결을 알아본다.</p><h2 id="server-구성하기"><a href="#server-구성하기" class="headerlink" title="server 구성하기"></a>server 구성하기</h2><p><img src="/images/posting/spring/springboot1/pic1.png" alt="스크린샷 2022-10-22 오후 1.15.15.png"></p><p>server는 spring boot로 개발한다. spring initializer로 프로젝트를 만들어 준다. java version은 11, 빌드 타입은 maven, packaging은 War을 선택해 줬다.</p><p><img src="/images/posting/spring/springboot1/pic2.png" alt="스크린샷 2022-10-22 오후 1.31.22.png"></p><p>의존성은 책 내용에 따라 3가지를 선택해 프로젝트를 생성해 준다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pom.xml--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml에 parent 태그에 spring boot 버전을 2.5.6으로 변경한 후 maven을 업데이트해 준다. 서버의 기본 프로젝트를 만들어 봤다. 이제 client를 만들어보자</p><h2 id="client-구성하기"><a href="#client-구성하기" class="headerlink" title="client 구성하기"></a>client 구성하기</h2><p>client는 react를 사용하기 때문에 폴더 위치는 어디에 둬도 문제가 없다. Jsp를 사용한다면 resources에 넣어두지만, react는 root 폴더에서 생성한다.</p><h3 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create react app"></a>create react app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create react-app client</span><br></pre></td></tr></table></figure><p>root 폴더에서 터미널에 위 명령을 실행해 준다.</p><h3 id="필요한-패키지-설치"><a href="#필요한-패키지-설치" class="headerlink" title="필요한 패키지 설치"></a>필요한 패키지 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom@6</span><br><span class="line">yarn add axios</span><br></pre></td></tr></table></figure><p>Routing을 위한 react-router-dom과 sever로 요청을 위한 axios를 설치해 준다. 이제 client에서 server로 요청 테스트를 해보자</p><h2 id="client에서-server로-요청-보내기"><a href="#client에서-server로-요청-보내기" class="headerlink" title="client에서 server로 요청 보내기"></a>client에서 server로 요청 보내기</h2><h3 id="CORS-error"><a href="#CORS-error" class="headerlink" title="CORS error"></a>CORS error</h3><p>spring boot의 포트는 8080이고 react의 포트는 3000이다. client에서 server로 요청을 할 경우 도메인이 다르면 CORS 에러가 발생하게 된다. CORS 에러를 방지하기 위한 설정을 해준다.</p><h4 id="client-설정"><a href="#client-설정" class="headerlink" title="client 설정"></a>client 설정</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> backendPortNumber = <span class="string">&quot;8080&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> serverUrl = <span class="string">&quot;http://&quot;</span> + <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hostname</span> + <span class="string">&quot;:&quot;</span> + backendPortNumber + <span class="string">&quot;/api/v1/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">endpoint, params = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`%cGET 요청 <span class="subst">$&#123;serverUrl + endpoint + <span class="string">&quot;/&quot;</span> + params&#125;</span>`</span>, <span class="string">&quot;color: #a25cd1;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(serverUrl + endpoint + <span class="string">&quot;/&quot;</span> + params, &#123;</span><br><span class="line">    <span class="comment">// JWT 토큰을 헤더에 담아 백엔드 서버에 보냄.</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">sessionStorage</span>.getItem(<span class="string">&quot;userToken&quot;</span>)&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client에서는 axios를 사용해 server 포트인 8080으로 요청하는 api.js를 만들어 줬다. api.js를 import해서 get요청을 하게 되면 요청 url을 변경해 줄 수 있다.</p><h4 id="server-설정"><a href="#server-설정" class="headerlink" title="server 설정"></a>server 설정</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MemberController.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/user&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello spring&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring boot에서는 client에서 8080번 포트로 보내는 요청에 대해 허용을 해줘야 한다. controller에 @CrossOrigin 으로 모든 경로에 대해 허용을 해준다. 위 코드처럼 controller 전체에 정의해 줘도 되고 각 메소드 별로 설정해 줘도 된다.</p><h3 id="client에서-요청-하기"><a href="#client에서-요청-하기" class="headerlink" title="client에서 요청 하기"></a>client에서 요청 하기</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span>,</span><br><span class="line">  rootElement</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>index.js를 위 코드와 같이 구현해 준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;./pages/About&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./pages/Home&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>App.js에 페이지에 대한 routing 경로를 지정해 준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Menu</span> <span class="keyword">from</span> <span class="string">&quot;./Menu&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Menu</span>&gt;</span><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Menu.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">API</span> <span class="keyword">from</span> <span class="string">&quot;../api&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Menu</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getAction</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable constant_">API</span>.<span class="title function_">get</span>(<span class="string">&quot;user/login&quot;</span>);</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">onClick</span>=<span class="string">&#123;getAction&#125;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          About</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Home.js에 nav 버튼을 가지고 있는 Menu를 넣어주었다. Menu.js에 Link 태그로 넘어갈 라우팅 경로와 onClick을 설정해 주었다. About 버튼을 누르면 getAction 함수가 동작하며 <code>user/login</code> 경로로 GET 요청을 보낸 후 요청이 끝나면 hello 메세지를 가지는 alert 창을 띄우게 된다. 위의 api.js에서 변경해준 경로로 요쳥하게 되면 <a href="http://localhost:8080/api/v1/user/login/%EC%9C%BC%EB%A1%9C">http://localhost:8080/api/v1/user/login/으로</a> 요청하게 된다.</p><h3 id="server에서-요청-받기"><a href="#server에서-요청-받기" class="headerlink" title="server에서 요청 받기"></a>server에서 요청 받기</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MemberController.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &#123;&quot;user&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1/user&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello spring&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server에서 controller 전체 url 을 &#x2F;api&#x2F;v1&#x2F;user로 설정해 주었고 login메서드를 GET방식의 &#x2F;login 경로로 설정했다. client에서 요청한 url에 따라 spring boot 터미널에서는 hello spring이 출력된다. 위에서 설명했던 CORS 설정을 해 주었기 때문에 server로 정상적인 요청이 가능한 것이다.</p><h4 id="결과-확인하기"><a href="#결과-확인하기" class="headerlink" title="결과 확인하기"></a>결과 확인하기</h4><p><img src="/images/posting/spring/springboot1/pic2_1.png" alt="스크린샷 2022-10-22 오후 2.32.27.png"></p><p>About 버튼을 누르게되면 server 터미널에 hello spring이 찍히고 화면에서는 hello 메세지를 가진 alert창이 뜬다.</p><h3 id="swagger-api-문서-생성"><a href="#swagger-api-문서-생성" class="headerlink" title="swagger api 문서 생성"></a>swagger api 문서 생성</h3><p>위 MemberController.java에서 @Api 어노테이션이 있다. Swagger api 문서를 자동으로 생성하기 위한 것이다. swagger api를 설정하는 방법을 알아본다.</p><h4 id="swagger-사용을-위한-의존성"><a href="#swagger-사용을-위한-의존성" class="headerlink" title="swagger 사용을 위한 의존성"></a>swagger 사용을 위한 의존성</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>swagger 3을 사용하기 위한 의존성이다. pom.xml에 추가해 준 후 maven을 업데이트해준다.</p><h4 id="swagger-config"><a href="#swagger-config" class="headerlink" title="swagger config"></a>swagger config</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SwaggerConfiguration.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SwaggerConfiguration</code> 파일에 위와 같이 swagger를 정의해준다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TechblogApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TechblogApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring application 파일에서 @EnableSwagger2 어노테이션을 추가해 준다. 이제 &#x2F;swagger-ui&#x2F;로 접속하면 api 문서를 확인할 수 있다.</p><p><img src="/images/posting/spring/springboot1/pic3.png" alt="스크린샷 2022-10-22 오후 2.30.49.png"></p><p>경로와 응답 타입 등 따로 설정하지 않아도 어노테이션만 붙여주면 잘 나오게 된다.</p><p>client에서 기본적인 요청과 api 문서까지 확인해 보았다.</p>]]></content>
    
    
    <summary type="html">spring boot와 react를 사용한 웹 서비스 개발</summary>
    
    
    
    <category term="spring-boot" scheme="https://nowgnastack.github.io/categories/spring-boot/"/>
    
    
    <category term="java react spring-boot swagger web" scheme="https://nowgnastack.github.io/tags/java-react-spring-boot-swagger-web/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis를 이용한 Spring Legacy Project 구조를 알아보자</title>
    <link href="https://nowgnastack.github.io/2022/10/18/2022-10-19-mybatispractice/"/>
    <id>https://nowgnastack.github.io/2022/10/18/2022-10-19-mybatispractice/</id>
    <published>2022-10-18T09:37:00.000Z</published>
    <updated>2023-04-17T01:56:16.341Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스팅에서는 sts3에서 Spring Legacy Project를 생성하고 웹 페이지에서 사용자 회원가입, 로그인을 mybatis를 이용해 구현한다.</p><h2 id="🛠기술-스택"><a href="#🛠기술-스택" class="headerlink" title="🛠기술 스택"></a>🛠기술 스택</h2><table><thead><tr><th>position</th><th>stack</th><th>version</th></tr></thead><tbody><tr><td>server</td><td>Java</td><td>jdk 17</td></tr><tr><td>database</td><td>mysql</td><td>8.x</td></tr><tr><td>client</td><td>html<br>javascript<br>css</td><td>-</td></tr></tbody></table><h2 id="Project-structure"><a href="#Project-structure" class="headerlink" title="Project structure"></a>Project structure</h2><h4 id="Server-폴더-구조"><a href="#Server-폴더-구조" class="headerlink" title="Server 폴더 구조"></a>Server 폴더 구조</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── nowgnas</span><br><span class="line">    ├── HomeController.java</span><br><span class="line">    ├── dao</span><br><span class="line">    │   └── MemberDAO.java</span><br><span class="line">    ├── dto</span><br><span class="line">    │   └── Member.java</span><br><span class="line">    └── service</span><br><span class="line">        └── MemberService.java</span><br></pre></td></tr></table></figure><h4 id="Client-폴더-구조"><a href="#Client-폴더-구조" class="headerlink" title="Client 폴더 구조"></a>Client 폴더 구조</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── resources</span><br><span class="line">│   └── mybatis</span><br><span class="line">│       ├── mappers</span><br><span class="line">│       │   └── member.xml</span><br><span class="line">│       └── model</span><br><span class="line">│           └── modelConfig.xml</span><br><span class="line">└── webapp</span><br><span class="line">    ├── WEB-INF</span><br><span class="line">    │   ├── config</span><br><span class="line">    │   │   └── jdbc</span><br><span class="line">    │   ├── spring</span><br><span class="line">    │   │   ├── appServlet</span><br><span class="line">    │   │   └── root-context.xml</span><br><span class="line">    │   ├── views</span><br><span class="line">    │   │   └── home.jsp</span><br><span class="line">    │   └── web.xml</span><br><span class="line">    ├── css</span><br><span class="line">    │   └── styles.css</span><br><span class="line">    ├── html</span><br><span class="line">    │   └── memberInsertForm.html</span><br><span class="line">    ├── index.html</span><br><span class="line">    ├── js</span><br><span class="line">    │   ├── my.js</span><br><span class="line">    │   └── scripts.js</span><br><span class="line">    └── resources</span><br></pre></td></tr></table></figure><p>상단의 resources는 데이터베이스 관련 설정 폴더와 Logger에 대한 설정이 있다.</p><h2 id="mybatis로-데이터베이스-정의하기"><a href="#mybatis로-데이터베이스-정의하기" class="headerlink" title="mybatis로 데이터베이스 정의하기"></a>mybatis로 데이터베이스 정의하기</h2><p>mybatis를 사용하기 위해 의존성 정의와 데이터베이스 정의를 위한 xml파일을 작성해 준다.</p><h3 id="의존성-정의"><a href="#의존성-정의" class="headerlink" title="의존성 정의"></a>의존성 정의</h3><p>mybatis를 이용해 데이터베이스를 제어하려면 mysql과 mybatis관련 의존성을 pom.xml에 정의해야 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hello<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cafe<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>1018_cafe2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-BUILD-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 이 부분 아래로 버전 설정 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java-version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.springframework-version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">org.springframework-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.aspectj-version</span>&gt;</span>1.9.9.1<span class="tag">&lt;/<span class="name">org.aspectj-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">org.slf4j-version</span>&gt;</span>1.7.36<span class="tag">&lt;/<span class="name">org.slf4j-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">&lt;!--spring jdbc, mysql connector, mybatis 관련 추가된 의존성 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--의존성 정의 끝 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-eclipse-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">additionalProjectnatures</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">projectnature</span>&gt;</span>org.springframework.ide.eclipse.core.springnature<span class="tag">&lt;/<span class="name">projectnature</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">additionalProjectnatures</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">additionalBuildcommands</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">buildcommand</span>&gt;</span>org.springframework.ide.eclipse.core.springbuilder<span class="tag">&lt;/<span class="name">buildcommand</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">additionalBuildcommands</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">downloadSources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">downloadSources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">downloadJavadocs</span>&gt;</span>true<span class="tag">&lt;/<span class="name">downloadJavadocs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-Xlint:all<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">showDeprecation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showDeprecation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.test.int1.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-jdbc와 mysql-connector, mybatis 관련 의존성들이다. Intellij에서는 reload all maven project를 해주면 되고, Eclipse에서는 프로젝트 우클릭 후 Maven→update project를 해주면 된다.</p><p>의존성을 적용시켰으니 mybatis를 사용하기 위한 설정을 해보자</p><h3 id="context-xml에-데이터베이스-정의하기"><a href="#context-xml에-데이터베이스-정의하기" class="headerlink" title="context.xml에 데이터베이스 정의하기"></a>context.xml에 데이터베이스 정의하기</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;propertyPlaceholderConfigurer&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;locations&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/WEB-INF/config/jdbc/jdbc.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.datasource.pooled.PooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring의 bean factory를 사용해 연결할 데이터베이스 정보를 jdbc.properties에 정의한다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:&lt;port&gt;/&lt;schema name&gt;</span><br><span class="line">jdbc.username=username</span><br><span class="line">jdbc.password=password</span><br></pre></td></tr></table></figure><p>데이터베이스 정보를 위와 같이 <code>jdbc.properties</code> 파일에 추가한다. root-context.xml에 datasource를 EL태그로 지정해 준다. ${jdbc.~}형태로 사용한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis/model/modelConfig.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis/mappers/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactoryBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;txManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sqlSessionFactory로 mybatis의 configuration과 mapper 경로를 정의한다. TransactionManager와 annotation을 사용한다는 annotation-driven을 정의해 준다.</p><h2 id="회원가입하기"><a href="#회원가입하기" class="headerlink" title="회원가입하기"></a>회원가입하기</h2><p>이제 사용자에게 회원가입을 할 수 있도록 해줄 것이다. 기본 템플릿 페이지에 회원가입 폼을 만들어 회원가입이 가능하게 만들어 본다.</p><h3 id="사용자-등록-form-생성"><a href="#사용자-등록-form-생성" class="headerlink" title="사용자 등록 form 생성"></a>사용자 등록 form 생성</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputName&quot;</span>&gt;</span>성명<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;이름을 입력해 주세요&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;InputEmail&quot;</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;ID를 입력해주세요&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;inputPassword&quot;</span>&gt;</span>비밀번호<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;pw&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;pw&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">&quot;비밀번호를 입력해주세요&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group text-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;memberInsertBtn&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">value</span>=<span class="string">&quot;회원가입&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span></span><br><span class="line">      가입취소<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-times spaceLeft&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>먼저 webapp&#x2F;html에 memberInsertForm.html을 생성해 사용자 회원가입 폼을 만들어 준다. 회원가입 버튼을 눌러 요청을 하기 위해 스트립트로 동작을 하게 해준다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">&quot;#memberInsertBtn&quot;</span>).<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> name = $(<span class="string">&quot;#name&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="keyword">let</span> id = $(<span class="string">&quot;#id&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="keyword">let</span> pw = $(<span class="string">&quot;#pw&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">post</span>(<span class="string">&quot;../memberInsert.shop&quot;</span>, &#123; name, id, pw &#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(data);</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">close</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>버튼에 클릭 이벤트를 준다. Form에 name, id, pw 값을 가져와 controller로 post요청을 한다. post요청 경로는 ..&#x2F;memberInsert.shop으로 요청한다.</p><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &quot;memberInsert.shop&quot;,</span></span><br><span class="line"><span class="meta">            method = RequestMethod.POST,</span></span><br><span class="line"><span class="meta">            produces = &quot;application/text; charset=utf8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">memberInsert</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;home controller&quot;</span>);</span><br><span class="line">        memberService.memberInsert(member);</span><br><span class="line">        <span class="keyword">return</span> member.getName() + <span class="string">&quot;님 환영합니다&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클라이언트의 회원가입 요청이 발생하면 동작하는 controller이다. <code>@RequestMapping</code>으로 요청 경로, 프로토콜 타입, 인코딩을 정의해 준다. <code>@ResponseBody</code>를 사용하게 되면 반환 시 클라이언트로 body가 넘어가게 된다. MemberService를 <code>@Autowired</code>로 객체 의존성을 주입한다.</p><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MemberDAO memberDAO;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">memberInsert</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">        memberDAO.memberInsert(member);</span><br><span class="line">        System.out.println(<span class="string">&quot;MemberService&quot;</span> + member.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Service</code> 어노테이션으로 Service임을 명시하고 MemberDAO 객체 의존성을 주입한다. Service에서는 DAO에 memberInsert를 호출한다.</p><h4 id="MemberDAO"><a href="#MemberDAO" class="headerlink" title="MemberDAO"></a>MemberDAO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">memberInsert</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">        <span class="comment">// jdbc 6단계</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MemberDAO &quot;</span> + member.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;member dao &quot;</span> + sqlSession);</span><br><span class="line">        <span class="comment">/*mapper의 namespace + id =&gt; mapper.member.memberInsert*/</span></span><br><span class="line">        sqlSession.insert(<span class="string">&quot;mapper.member.memberInsert&quot;</span>, member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DAO는 <code>@Repository</code> 어노테이션을 사용한다. DAO에서는 위 내용에서 mybatis로 정의된 SqlSession을 사용해 데이터베이스에 접근한다.</p><p>sqlSession으로 쿼리를 사용하려면 main&#x2F;resources&#x2F;mybatis&#x2F;mappers에 정의된 xml파일에 접근해야 한다. insert()의 첫번째 인자는 mapper 요청 경로이고, 두 번째 인자는 mapper에서 지정한 데이터 타입이다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.member&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dto의 클래스 - modelConfig.xml에서 정의한 것 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;memberInsert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;member&quot;</span>&gt;</span></span><br><span class="line">        insert into member(name, id, pw)</span><br><span class="line">        values (#&#123;name&#125;, #&#123;id&#125;, #&#123;pw&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mapper의 namespace를 mapper.member로 지정한다. insert 쿼리를 사용하기 위해 <insert>태그를 사용한다. insert 태그의 id는 DAO에서 mapper요청 경로인 memberInsert로 지정한다. parameterType은 member객체로 설정한다.</p><p>sql쿼리에서 입력될 값은 #{}을 사용하며, 변수명은 DTO에 정의된 변수명과 같아야 한다.</p><h2 id="사용자-로그인-하기"><a href="#사용자-로그인-하기" class="headerlink" title="사용자 로그인 하기"></a>사용자 로그인 하기</h2><p>회원가입한 사용자에게 로그인을 하게 해주어야 한다. 로그인 요청을 구현해 본다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msgDiv&quot;</span>&gt;</span></span><br><span class="line">  ID<span class="tag">&lt;<span class="name">input</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loginId&quot;</span> /&gt;</span> PW<span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;5&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;loginPw&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>로그인을 위한 필드를 만들어 준다. ID와 PW를 입력 받아 login 버튼으로 로그인을 시도한다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    $(<span class="string">&quot;#loginBtn&quot;</span>).<span class="title function_">click</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> id = $(<span class="string">&quot;#loginId&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">        <span class="keyword">let</span> pw = $(<span class="string">&quot;#loginPw&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line"></span><br><span class="line">        $.<span class="title function_">post</span>(<span class="string">&quot;login.shop&quot;</span>, &#123;id, pw&#125;, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">            <span class="keyword">if</span> (obj.<span class="property">name</span>) &#123;</span><br><span class="line">                data = obj.<span class="property">name</span> + <span class="string">&quot;&lt;input type=&#x27;button&#x27; value=&#x27;logout&#x27; id=&#x27;logoutBtn&#x27; class=&#x27;btn btn-primary&#x27;&gt;&quot;</span>;</span><br><span class="line">                $.<span class="title function_">cookie</span>(<span class="string">&quot;logined&quot;</span>, data);</span><br><span class="line">                $(<span class="string">&quot;#msgDiv&quot;</span>).<span class="title function_">html</span>(data);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(obj.<span class="property">msg</span>);</span><br><span class="line">                location.<span class="title function_">reload</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>loginBtn에 클릭 이벤트를 연결한다. login 필드에 사용되는id와 pw를 가져와 <code>login.shop</code>으로 post요청을 한다. 로그인 성공 시 사용자의 이름이 data에 반환되고 logout 버튼으로 로그인 필드를 변경해 준다. post 요청 후 동작을 알아본다.</p><h4 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;login.shop&quot;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.POST&#125;,</span></span><br><span class="line"><span class="meta">            produces = &quot;application/text; charset=utf8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pw</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pw&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">JsonObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>(id, pw);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberService.login(member);</span><br><span class="line">            <span class="keyword">if</span> (name != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">                session.setAttribute(<span class="string">&quot;member&quot;</span>, member);</span><br><span class="line"></span><br><span class="line">                json.addProperty(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                json.addProperty(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;로그인 실패&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            json.addProperty(<span class="string">&quot;msg&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller에 login 메서드를 추가한다. RequestMapping 경로는 <code>login.shop</code>, post 방식, 한글 깨짐 방지를 위한 인코딩을 설정해 주고, ResponseBody 어노테이션을 추가한다.</p><p>로그인 요청은 request로 id와 pw를 받아오게된다. 클라이언트에 넘겨주기 위해 gson의 JsonObject를 사용했다. Member dto에 id와pw를 받는 생성자를 만들어 주었기 때문에 id와 pw으로만 Member 객체를 생성할 수 있다. 새로 생성된 Member 객체를 MemberService의 login 메서드로 넘겨준다.</p><h4 id="Service-1"><a href="#Service-1" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MemberDAO memberDAO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memberDAO.login(member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service는 간단하게 DAO의 login을 호출한다.</p><h4 id="MemberDAO-1"><a href="#MemberDAO-1" class="headerlink" title="MemberDAO"></a>MemberDAO</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(Member member)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.selectOne(<span class="string">&quot;mapper.member.login&quot;</span>, member);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DAO에서 sqlSession의 selectOne으로 로그인 요청을 한다. 요청 경로는 mapper.member.login이고 id와 pw가 포함되어 있는 member를 넘겨준다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.member&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dto의 클래스 - modelConfig.xml에서 정의한 것 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;memberInsert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;member&quot;</span>&gt;</span></span><br><span class="line">        insert into member(name, id, pw)</span><br><span class="line">        values (#&#123;name&#125;, #&#123;id&#125;, #&#123;pw&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;member&quot;</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">        select name</span><br><span class="line">        from member</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">          and pw = #&#123;pw&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>sqlSession의 selectOne으로 요청하면 member.xml의 id가 login인 select태그로 들어온다. 쿼리문의 반환값인 resultType은 String이며, DAO에서 넘어온 parameterType은 member객체이다.</p><p>쿼리문의 CDATA는 문자열 비교연산이나 부등호를 구분하기 위해 사용한다. CDATA 태그 안에서는 모두 문자열로 처리하게 된다.</p><p>where 조건에 id와 pw를 #{}로 값을 받아온다. 변수명은 회원가입 예시와 동일하게 Member dto의 변수명과 같아야 한다.</p>]]></content>
    
    
    <summary type="html">mybatis를 사용한 spring legacy project 구조를 알아본다</summary>
    
    
    
    <category term="spring" scheme="https://nowgnastack.github.io/categories/spring/"/>
    
    
    <category term="java mvc mybatis spring sts" scheme="https://nowgnastack.github.io/tags/java-mvc-mybatis-spring-sts/"/>
    
  </entry>
  
  <entry>
    <title>Spring Framework 파헤쳐보기</title>
    <link href="https://nowgnastack.github.io/2022/10/17/2022-10-17-springbean/"/>
    <id>https://nowgnastack.github.io/2022/10/17/2022-10-17-springbean/</id>
    <published>2022-10-17T14:20:00.000Z</published>
    <updated>2023-07-23T15:20:52.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h2><p>Spring 프레임워크는 자바를 사용해 Enterprise Application을 만들 때 포괄적으로 사용하는 프로그래밍 및 Configuration Model을 제공해 주는 프레임워크로 Application 수준의 인프라를 제공한다.</p><p>Spring 프레임워크는 개발자가 복잡하고 실수하기 쉬운 low level에 신경쓰지 않고 business logic 구현에만 집중할 수 있게 해준다.</p><p>Spring 컨테이너는 자바 객체의 생성, 소멸과 같은 라이프사이클을 관리한다. 언제든지 스프링 컨테이너로부터 필요한 객체를 가져와 사용할 수 있다.</p><p>스프링은 JDBC와 Mybatis, Hibernate, JPA 등 DB 처리를 위해 사용되는 라이브러리와의 연동을 지원한다. 또한 JMS, 메일, 스케쥴링 등 다양한 API를 설정파일과 Annotation을 통해 쉽게 사용할 수 있도록 지원한다.</p><h2 id="Spring-Framework의-구조"><a href="#Spring-Framework의-구조" class="headerlink" title="Spring Framework의 구조"></a>Spring Framework의 구조</h2><h3 id="POJO-Plain-Old-Java-Object"><a href="#POJO-Plain-Old-Java-Object" class="headerlink" title="POJO(Plain Old Java Object)"></a>POJO(Plain Old Java Object)</h3><p>특정 환경이나 기술에 종속적이지 않은 객체지향 원리에 충실한 자바 객체이다. 테스트에 용이하며 객체지향 설계를 자유롭게 적용할 수 있는 특징이 있다.</p><h3 id="PSA-Portable-Service-Abstraction"><a href="#PSA-Portable-Service-Abstraction" class="headerlink" title="PSA(Portable Service Abstraction)"></a>PSA(Portable Service Abstraction)</h3><p>환경과 세부기술의 변경과 관계없이 일관된 방식으로 기술에 접근할 수 있게 해주는 설계원칙으로 트랜잭션 추상화, OXM 추상화, 데이터 엑세스의 Exception 변환기능 등 기술적인 복잡함은 추상화하여 low level의 기술 구현 부분과 기술을 사용하는 인터페이스로 분리한다.</p><h3 id="IoC-Inversion-of-Control-DI-Dependency-Injection"><a href="#IoC-Inversion-of-Control-DI-Dependency-Injection" class="headerlink" title="IoC(Inversion of Control)&#x2F;DI(Dependency Injection)"></a>IoC(Inversion of Control)&#x2F;DI(Dependency Injection)</h3><p>DI는 유연하게 확장 가능한 객체를 만들어 두고 객체 간의 의존관계는 외부에서 다이나믹하게 설정한다. IoC는 Servlet container 및 EJB container에 객체 제어권이 주어지는 특징이 있다.</p><h3 id="AOP-Aspect-Oriented-Programming"><a href="#AOP-Aspect-Oriented-Programming" class="headerlink" title="AOP(Aspect Oriented Programming)"></a>AOP(Aspect Oriented Programming)</h3><p>관심사의 분리를 통해서 소프트웨어의 모듈성을 향상시킨다. 공통 모듈을 여러 코드에서 쉽게 적용 가능하게 만들어 준다.</p><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p>container는 라이프사이클을 관리하고 스레드 관리와 의존성 객체를 제공한다. container는 비즈니스 로직 외에 부가적인 기능에 대해서 독립적으로 관리되도록 하기 위해 존재한다. 서비스 객체를 사용하기 위해 각 Factory나 Singleton 패턴을 직접 구현하지 않아도 된다.</p><h3 id="DI-Container"><a href="#DI-Container" class="headerlink" title="DI Container"></a>DI Container</h3><p>DI 컨테이너가 관리하는 객체를 Bean이라고 하고 Bean의 라이프사이클을 관리하는 것이 BeanFactory이다. BeanFactory에 여러 컨테이너 기능을 추가하여 ApplicationContext라고 한다.</p><p>Bean은 스프링이 IoC 방식으로 관리하는 object를 말한다. Bean은 스프링이 직접 생성과 제어를 담당한다.</p><p>BeanFactory는 스프링 IoC를 담당하는 핵심 컨테이너로 Bean의 등록, 생성, 조회, 반환을 담당한다. ApplicationContext는 BeanFactory를 확장한 IoC컨테이너이다. 기본 동작은 BeanFactory와 동일하며, 스프링이 제공하는 부가 서비스를 추가로 제공한다.</p><h3 id="IoC-Container"><a href="#IoC-Container" class="headerlink" title="IoC Container"></a>IoC Container</h3><p>스프링에서 IoC를 담당하는 컨테이너는 BeanFactory, ApplicationContext가 있다. Object의 생성과 관계 설정, 사용, 제거 등 작업을 애플리케이션 코드 대신 독립된 컨테이너가 담당한다.</p><p>객체 생성을 컨테이너에 위임하여 처리하므로 객체 간의 결합도를 낮출 수 있다. 프로젝트의 결합도가 높으면 유지보수 시 하나의 클래스가 변경될 때 다수의 클래스들도 변경되어야 하므로 결합도가 낮은 프로젝트가 유지보수에 용이하다.</p><p><img src="/images/posting/spring/bean/pic1.png" alt="스크린샷 2022-10-18 오전 8.14.02.png"></p><p>IoC의 호출 방식은 위와 같다. 팩토리 패턴의 장점을 더하여 어떠한 것에도 의존하지 않는 형태를 가진다. 실행 시점에 클래스 간의 관계가 형성된다.</p><p>applicationContext.xml에서 bean을 이용해 service 구현체 객체의 생성 및 관리를 하고, controller에서 ApplicationContext의 ClassPathXmlApplicationContext로 xml파일을 읽어 각 bean을 불러와 service를 불러온다.</p><h2 id="DI-Dependency-Injection"><a href="#DI-Dependency-Injection" class="headerlink" title="DI(Dependency Injection)"></a>DI(Dependency Injection)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;memberService&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">// singleton으로 생성</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MemberService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertMember</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans:bean id=<span class="string">&quot;memberService&quot;</span> class=<span class="string">&quot;com.hello.myapp.MemberServiceImpl&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>스프링 Bean은 싱글톤으로 만들어지므로 컨테이너가 제공하는 모든 빈의 인스턴스는 항상 동일하다. 싱글톤 정의는 annotation으로 한다. 컨테이너가 항상 새로운 인스턴스를 반환하게 만들고 싶은 경우 scope를 prototype으로 설정해줘야 한다.</p><h4 id="Bean의-범위-지정"><a href="#Bean의-범위-지정" class="headerlink" title="Bean의 범위 지정"></a>Bean의 범위 지정</h4><h5 id="singleton-스프링-컨테이너당-하나의-인스턴스-빈만-생성-default"><a href="#singleton-스프링-컨테이너당-하나의-인스턴스-빈만-생성-default" class="headerlink" title="singleton: 스프링 컨테이너당 하나의 인스턴스 빈만 생성(default)"></a>singleton: 스프링 컨테이너당 하나의 인스턴스 빈만 생성(default)</h5><h5 id="prototype-컨테이너-빈을-요청할-때마다-새로운-인스턴스-생성"><a href="#prototype-컨테이너-빈을-요청할-때마다-새로운-인스턴스-생성" class="headerlink" title="prototype: 컨테이너 빈을 요청할 때마다 새로운 인스턴스 생성"></a>prototype: 컨테이너 빈을 요청할 때마다 새로운 인스턴스 생성</h5><h5 id="request-HTTP-Request-별로-새로운-인스턴스-생성"><a href="#request-HTTP-Request-별로-새로운-인스턴스-생성" class="headerlink" title="request: HTTP Request 별로 새로운 인스턴스 생성"></a>request: HTTP Request 별로 새로운 인스턴스 생성</h5><h5 id="session-HTTP-Session-별로-새로운-인스턴스-생성"><a href="#session-HTTP-Session-별로-새로운-인스턴스-생성" class="headerlink" title="session: HTTP Session 별로 새로운 인스턴스 생성"></a>session: HTTP Session 별로 새로운 인스턴스 생성</h5><p>스프링 Bean설정은 xml과 annotation 방식으로 가능하다. xml에서는 <code>&lt;bean&gt;</code>태그를 사용해 제어한다.</p><p>어플리케이션의 규모가 커지고 bean의 개수가 많아질 경우 xml 파일을 관리하는 것이 힘들어진다. Bean으로 사용될 클래스에 annotation을 부여해 자동으로 bean을 등록해 준다.</p><p>오브젝트 빈 스캐너로 빈 스캐닝을 통해 자동으로 등록된다. Bean 스캐너는 기본적으로 클래스 이름의 bean의 아이디로 사용한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hello.cafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>annotation으로 bean을 사용할 경우 servlet-context.xml에서 context에 component-scan을 추가해 줘야 한다.</p><h4 id="spring-bean-annotation의-종류"><a href="#spring-bean-annotation의-종류" class="headerlink" title="spring bean annotation의 종류"></a>spring bean annotation의 종류</h4><h5 id="Repository-Data-Access-Layer의-DAO-또는-Repository-클래스에-사용된다-Data-Access-Exception-자동변환과-같은-AOP의-적용-대상을-선정하기-위해-사용된다"><a href="#Repository-Data-Access-Layer의-DAO-또는-Repository-클래스에-사용된다-Data-Access-Exception-자동변환과-같은-AOP의-적용-대상을-선정하기-위해-사용된다" class="headerlink" title="@Repository: Data Access Layer의 DAO 또는 Repository 클래스에 사용된다. Data Access Exception 자동변환과 같은 AOP의 적용 대상을 선정하기 위해 사용된다."></a>@Repository: Data Access Layer의 DAO 또는 Repository 클래스에 사용된다. Data Access Exception 자동변환과 같은 AOP의 적용 대상을 선정하기 위해 사용된다.</h5><h5 id="Service-Service-layer의-클래스에-사용된다"><a href="#Service-Service-layer의-클래스에-사용된다" class="headerlink" title="@Service: Service layer의 클래스에 사용된다."></a>@Service: Service layer의 클래스에 사용된다.</h5><h5 id="Controller-Presentation-Layer의-MVC-controller에-사용된다-스프링-웹-서블릿에-의해-웹-서블릿에-의해-웹-요청을-처리하는-컨트롤러-bean으로-선정한다"><a href="#Controller-Presentation-Layer의-MVC-controller에-사용된다-스프링-웹-서블릿에-의해-웹-서블릿에-의해-웹-요청을-처리하는-컨트롤러-bean으로-선정한다" class="headerlink" title="@Controller: Presentation Layer의 MVC controller에 사용된다. 스프링 웹 서블릿에 의해 웹 서블릿에 의해 웹 요청을 처리하는 컨트롤러 bean으로 선정한다"></a>@Controller: Presentation Layer의 MVC controller에 사용된다. 스프링 웹 서블릿에 의해 웹 서블릿에 의해 웹 요청을 처리하는 컨트롤러 bean으로 선정한다</h5><h5 id="Component-위의-layer-구분을-적용하기-어려운-일반적인-경우-설정한다"><a href="#Component-위의-layer-구분을-적용하기-어려운-일반적인-경우-설정한다" class="headerlink" title="@Component: 위의 layer 구분을 적용하기 어려운 일반적인 경우 설정한다."></a>@Component: 위의 layer 구분을 적용하기 어려운 일반적인 경우 설정한다.</h5><h2 id="spring-bean-의존관계-설정하기-xml"><a href="#spring-bean-의존관계-설정하기-xml" class="headerlink" title="spring bean 의존관계 설정하기 (xml)"></a>spring bean 의존관계 설정하기 (xml)</h2><p>객체 또는 값을 constructor를 통해 주입 받는다. constructor-arg 태그는 <code>&lt;bean&gt;</code>의 하위 태그로 설정한 bean 객체 또는 값을 생성자를 통해 주입하도록 설정한다.</p><p><code>&lt;constructor-arg&gt;</code>의 하위 태그로 ref와 value가 있다. ref는 객체 주입 시 사용하고 <code>&lt;ref bean=”bean name” /&gt;</code> 으로 사용한다. value에는 문자열이 들어가며, primitive data 주입 시 사용한다. value의 속성으로 type이 들어갈 수 있다.</p><p>속성으로 사용할 수도 있다. <code>&lt;constructor-arg ref=”bean name&quot; /&gt;</code>으로 사용하고 <code>&lt;constructor-arg value=”값” /&gt;</code>으로 사용한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;service&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;dao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 코드 처럼 주입하게 된다.</p><p>Bean 의존 관계설정에 property 태그를 사용할 수 있다. property 또한 하위 태그와 속성으로 이용할 수 있다. 하위 태그인 경우 constructor-arg와 동일하며, 속성으로 사용할 경우 <code>&lt;property name=”property name” ref=”bean name” /&gt;</code>, <code>&lt;property name=”property name” value=”값” /&gt;</code> 으로 사용한다.</p><h2 id="Annotation-방식을-사용한-bean-의존-관계-설정"><a href="#Annotation-방식을-사용한-bean-의존-관계-설정" class="headerlink" title="Annotation 방식을 사용한 bean 의존 관계 설정"></a>Annotation 방식을 사용한 bean 의존 관계 설정</h2><p>Annotation은 멤버 변수에 직접 정의 하는 경우 setter method를 만들지 않아도 된다. 앞으로 많이 사용하게 될 annotation 방식 bean 의존 관계를 알아보자.</p><table><thead><tr><th align="center">annotation</th><th>설명</th></tr></thead><tbody><tr><td align="center">@Resource</td><td>Spring 2.5부터 지원<br>멤버 변수, setter method에 사용 가능<br>타입에 맞춰 연결</td></tr><tr><td align="center">@Autowired</td><td>Spring 2.5 부터 지원<br>Spring에서만 사용 가능<br>Required 속성을 통해 DI여부 조정<br>멤버 변수, setter, constructor, 일반 method 사용 가능<br>타입에 맞춰 연결</td></tr><tr><td align="center">@Inject</td><td>Spring 3.0부터 지원<br>Framework에 종속적이지 않다<br>Javax.Inject.x.jar가 필요<br>멤버 변수, setter, constructor, 일반 method 사용 가능<br>이름으로 연결</td></tr></tbody></table><h2 id="Bean-객체의-생성-단위"><a href="#Bean-객체의-생성-단위" class="headerlink" title="Bean 객체의 생성 단위"></a>Bean 객체의 생성 단위</h2><table><thead><tr><th align="center">scope</th><th>설명</th></tr></thead><tbody><tr><td align="center">singleton</td><td>스프링 컨테이너당 하나의 인스턴스 빈만 생성</td></tr><tr><td align="center">prototype</td><td>컨테이너에 빈을 요청할 때마다 새로운 인스턴스 생성</td></tr><tr><td align="center">request</td><td>HTTP Request 별로 새로운 인스턴스 생성</td></tr><tr><td align="center">session</td><td>HTTP Session 별로 새로운 인스턴스 생성</td></tr></tbody></table><h2 id="Bean의-life-cycle"><a href="#Bean의-life-cycle" class="headerlink" title="Bean의 life cycle"></a>Bean의 life cycle</h2><p>지금까지 봤던 bean의 생명주기이다.</p><p><img src="/images/posting/spring/bean/beanlifecycle.png" alt="beanlifecycle.png"></p>]]></content>
    
    
    <summary type="html">spring에서 DI와 AOP에 대해 알아본다</summary>
    
    
    
    <category term="spring" scheme="https://nowgnastack.github.io/categories/spring/"/>
    
    
    <category term="aop di java spring" scheme="https://nowgnastack.github.io/tags/aop-di-java-spring/"/>
    
  </entry>
  
  <entry>
    <title>사용자 정보 암호화 하기 (With Java)</title>
    <link href="https://nowgnastack.github.io/2022/10/09/2022-10-10-encryption/"/>
    <id>https://nowgnastack.github.io/2022/10/09/2022-10-10-encryption/</id>
    <published>2022-10-09T07:21:00.000Z</published>
    <updated>2023-04-17T01:56:16.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="User-Security-VO-Value-Object"><a href="#User-Security-VO-Value-Object" class="headerlink" title="User Security VO(Value Object)"></a>User Security VO(Value Object)</h1><p>사용자가 회원가입 시 저장되는 비밀번호는 암호화 되어야 한다. 사용자 비밀번호 암호화를 위한 security VO를 이용해 사용자 id, salt, secret key를 저장한다.</p><h1 id="암호화-Encryption"><a href="#암호화-Encryption" class="headerlink" title="암호화 (Encryption)"></a>암호화 (Encryption)</h1><p>사용자 비밀번호 암호화를 하기 전 암호화에 대해 간단히 알아본다.</p><p>암호화는 크게 양방향 암호화, 단방향 암호화가 있다. 양방향은 키를 이용한 복호화가 가능하다는 차이점이 있다.</p><h2 id="양방향-암호화"><a href="#양방향-암호화" class="headerlink" title="양방향 암호화"></a>양방향 암호화</h2><p>양방향 암호화에는 대칭키 방식과 비대칭키 방식으로 나눌 수 있다. 대칭 키 방식은 암호화와 복호화에 사용하는 키가 같은 것이고, 비대칭키 방식은 암호화 하는 키와 복호화 하는 키가 다른 것이다.</p><p>대칭키 방식에는 AES, DES, SEED 등이 있다. 이번 포스팅에서는 AES128 방식을 사용할 것이다.</p><p>비대칭키 방식에는 DAS, RSA가 있다. 대칭키에 비해 느리지만, 키 생성 시 private key와 public key가 생성된다.</p><h2 id="단방향-암호화"><a href="#단방향-암호화" class="headerlink" title="단방향 암호화"></a>단방향 암호화</h2><p>단방향 암호화는 hash를 이용해서 암호화 하는 방법이다. 평문을 암호화 할 수 있지만, 복호화는 불가능하다.</p><p>단방향 암호화는 사용자 인증, 인가에 사용되는 JWT(json web token)에 사용되는 방식이다.</p><h1 id="사용자-정보-암호화-하기"><a href="#사용자-정보-암호화-하기" class="headerlink" title="사용자 정보 암호화 하기"></a>사용자 정보 암호화 하기</h1><p>이번 예시에서는 <code>AES128</code> 방식으로 평문을 암호화 해볼 것이다. 암호화가 사용되는 시점은 사용자 회원가입 시 발생하게 된다.</p><p>비밀번호는 단방향 해시 알고리즘인 <code>SHA256</code>을 사용해 암호화 할 것이다. 단방향 암호화 알고리즘을 사용해 복호화가 불가능하게 한다.</p><p><code>java.security</code>와 <code>javax.crypto</code> 클래스에서 import 하여 사용한다.</p><h3 id="1-Generate-key"><a href="#1-Generate-key" class="headerlink" title="1. Generate key"></a>1. Generate key</h3><p>AES 128 방식으로 secret key를 발급한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encrypt</span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] generateKey(String algorithm, <span class="type">int</span> keySize) <span class="keyword">throws</span></span><br><span class="line">            NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> KeyGenerator.getInstance(algorithm);</span><br><span class="line">        keyGenerator.init(keySize);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> keyGenerator.generateKey();</span><br><span class="line">        <span class="keyword">return</span> key.getEncoded();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>generateKey</code> 메서드에 <code>algorithm</code>에는 암호화의 방식, <code>keySize</code>는 키의 크기가 들어간다. <code>algorithm</code>은 AES, <code>keySize</code>는 128로 한다.</p><p>javax.crypto의 KeyGenerator를 사용해 알고리즘 종류와 키의 크기로 초기화 해준다. KeyGenerator의 generateKey()를 이용해 키를 생성한 후 getEncoded()로 키를 반환한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">byteArrayToHex</span><span class="params">(<span class="type">byte</span>[] ba)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ba == <span class="literal">null</span> || ba.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(ba.length * <span class="number">2</span>);</span><br><span class="line">    String hexNumber;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; ba.length; x++) &#123;</span><br><span class="line">        hexNumber = <span class="string">&quot;0&quot;</span> + Integer.toHexString(<span class="number">0xff</span> &amp; ba[x]);</span><br><span class="line">        sb.append(hexNumber.substring(hexNumber.length() - <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>generateKey()</code>메서드에서 얻어진 byte 배열을 16진수의 문자열로 변환하는 <code>byteArrayToHex</code> 메서드이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] key = generateKey(<span class="string">&quot;AES&quot;</span>, <span class="number">128</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;key length: &quot;</span> + key.length);</span><br><span class="line"><span class="type">String</span> <span class="variable">hexKey</span> <span class="operator">=</span> byteArrayToHex(key);</span><br><span class="line">System.out.println(hexKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">key length: 16</span></span><br><span class="line"><span class="comment">9880ac1ecc316c9929b700a95b38b372</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>byteArrayToHex</code>를 사용하여 secret key를 출력해 보았다. 키의 길이는 16, 아래는 키를 16진수로 변환한 것이다.</p><p>이제 암호화에 사용할 secret key는 발급되었다. security VO 모델에 사용자 id와 salt에 저장될 UUID, 발급된 AES 128 16진수 키를 저장한다.</p><h3 id="2-사용자-이름-암호화"><a href="#2-사용자-이름-암호화" class="headerlink" title="2. 사용자 이름 암호화"></a>2. 사용자 이름 암호화</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">aesEncrypt</span><span class="params">(String msg, <span class="type">byte</span>[] key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">SecretKeySpec</span> <span class="variable">skeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="string">&quot;AAAAAAAAAAAAAAAA&quot;</span>;</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE,</span><br><span class="line">            skeySpec,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(iv.getBytes()));</span><br><span class="line">    <span class="type">byte</span>[] encrypted = cipher.doFinal(msg.getBytes());</span><br><span class="line">    <span class="keyword">return</span> byteArrayToHex(encrypted);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">평문: lee</span></span><br><span class="line"><span class="comment">encrypt: 91f0742622d1defa32ca78f399cd62e7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>데이터베이스에 저장되는 사용자의 정보는 마스킹한 후 저장되어야 한다. 키를 사용해 암호화와 복호화가 가능한 Cipher 클래스를 사용해 인스턴스를 생성하고, Cipher mode, secret key, 복호화에 사용할 키를 넣어 초기화해 준다. 초기화한 Cipher에 평문을 byte로 넣어 암호화 한 후 16진수로 변환해 반환한다. 반환된 16진수 문자열은 데이터베이스에 저장된다.</p><h3 id="3-사용자-비밀번호-암호화"><a href="#3-사용자-비밀번호-암호화" class="headerlink" title="3. 사용자 비밀번호 암호화"></a>3. 사용자 비밀번호 암호화</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getSHA256(String source, String salt) &#123;</span><br><span class="line">    <span class="type">byte</span> byteData[] = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">        md.update(source.getBytes());</span><br><span class="line">        md.update(salt.getBytes());</span><br><span class="line">        byteData = md.digest();</span><br><span class="line">        System.out.println(<span class="string">&quot;원문: &quot;</span> + source + <span class="string">&quot; SHA-256: &quot;</span> +</span><br><span class="line">                byteData.length + <span class="string">&quot;,&quot;</span> + byteArrayToHex(byteData));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> byteData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">원문: 1234</span></span><br><span class="line"><span class="comment">SHA-256: 4b3bed8af7b7612e8c1e25f63ba24496f5b16b2df44efb2db7ce3cb24b7e96f7</span></span><br><span class="line"><span class="comment">pw encrypt: K;���a.�%�;�D���k-�N�-��&lt;�K~��</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>비밀번호는 단방향 암호화 알고리즘인 SHA256 방식으로 암호화 되어 저장된다. 복호화 가능한 키가 없는 해시 알고리즘이다. <code>getSHA256</code>메서드의 두 번째 인자인 <code>salt</code>는 위에서 security VO 모델에 저장한 salt를 사용하게 된다.</p><p>MessageDigest 클래스를 사용하여 인스턴스를 생성해 준다. 평문과 salt를 byte로 변환해 추가한다. 데이터베이스에 암호화된 byte 데이터가 저장된다.</p><h1 id="사용자-정보-복호화-하기"><a href="#사용자-정보-복호화-하기" class="headerlink" title="사용자 정보 복호화 하기"></a>사용자 정보 복호화 하기</h1><p>마스킹되어 저장된 사용자 이름을 복호화 해 볼 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">aesDecrypt</span><span class="params">(String msg, <span class="type">byte</span>[] key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">SecretKeySpec</span> <span class="variable">skeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="string">&quot;AAAAAAAAAAAAAAAA&quot;</span>;</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE,</span><br><span class="line">            skeySpec,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(iv.getBytes()));</span><br><span class="line">    <span class="type">byte</span>[] encrypted = hexToByteArray(msg);</span><br><span class="line">    <span class="type">byte</span>[] original = cipher.doFinal(encrypted);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(original);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터베이스에 있는 사용자 정보를 복호화 하기 위해서 암호화에 사용된 secret key와 ivParameter가 필요하다. Cipher 초기화 부분에 mode 만 <code>DECRYPT_MODE</code>로 변경해 주면 된다. 암호화된 msg를 다시 byte 배열로 변환해 준 후 복호화를 진행한다. 복호화를 하게 되면 암호화 시 넣었던 평문이 반환된다.</p><hr><h2 id="암호화된-비밀번호는-어떻게-사용할까"><a href="#암호화된-비밀번호는-어떻게-사용할까" class="headerlink" title="암호화된 비밀번호는 어떻게 사용할까?"></a>암호화된 비밀번호는 어떻게 사용할까?</h2><p>데이터베이스에 사용자 비밀번호는 해시 함수를 사용하여 암호화 되어 있다. 사용자가 정보를 변경하거나 어떤 동작에서 비밀번호를 입력 하는 행위가 필요한 경우 사용자가 입력한 비밀번호를 동일한 방식으로 해시화 해서 데이터베이스에 저장된 값과 비교한다.</p>]]></content>
    
    
    <summary type="html">자바에서 암호화 알고리즘 사용에 대해 알아본다</summary>
    
    
    
    <category term="java" scheme="https://nowgnastack.github.io/categories/java/"/>
    
    
    <category term="SHA256 encrypt AES128 decrypt java" scheme="https://nowgnastack.github.io/tags/SHA256-encrypt-AES128-decrypt-java/"/>
    
  </entry>
  
  <entry>
    <title>Object Oriented Analysis and Design Using UML</title>
    <link href="https://nowgnastack.github.io/2022/09/26/2022-09-26-oosd/"/>
    <id>https://nowgnastack.github.io/2022/09/26/2022-09-26-oosd/</id>
    <published>2022-09-26T05:50:00.000Z</published>
    <updated>2023-04-17T01:56:16.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="소프트웨어-개발과정"><a href="#소프트웨어-개발과정" class="headerlink" title="소프트웨어 개발과정"></a>소프트웨어 개발과정</h1><h2 id="OOSD-Process-객체-지향-소프트웨어-개발-과정"><a href="#OOSD-Process-객체-지향-소프트웨어-개발-과정" class="headerlink" title="OOSD Process(객체 지향 소프트웨어 개발 과정)"></a>OOSD Process(객체 지향 소프트웨어 개발 과정)</h2><p>OOSD Process의 workflow는 7단계로 이뤄진다.</p><h2 id="요구사항-수집"><a href="#요구사항-수집" class="headerlink" title="요구사항 수집"></a><strong>요구사항 수집</strong></h2><p>비즈니스 오너와 시스템 사용자들과의 인터뷰를 통해서 시스템의 요구 사항을 결정 짓는 단계</p><ul><li>기능적 요구사항</li><li>비기능적 요구사항</li><li>누가 사용할 것인지</li><li>시스템이 지원해야 하는 행동</li></ul><h2 id="요구사항-분석"><a href="#요구사항-분석" class="headerlink" title="요구사항 분석"></a><strong>요구사항 분석</strong></h2><p>시스템 요구 사항을 분석, 정제, 모델링 하는 단계</p><ul><li>정교한 use case diagram의 내용</li><li>problem domain안에서 무엇을 key abstraction할 것인지</li><li>유스 케이스 시나리오 분석</li><li>유스케이스 검증</li><li>crc 분석을 통해 key abstraction 결정</li><li>key abstraction들의 관계 표현</li><li>domain model을 검증</li></ul><h2 id="아키텍처-수립"><a href="#아키텍처-수립" class="headerlink" title="아키텍처 수립"></a><strong>아키텍처 수립</strong></h2><p>시스템의 high-level 구조를 모델링하여 프로젝트의 리스크를 진단하고 그것을 줄일 수 있는 방법을 강구하는 단계</p><ul><li>소프트웨어 솔루션의 최상위 레벨 구조를 개발</li><li>아키텍처 모델을 지원할 기술 선정</li><li>비기능적 요구 사항을 만족시키기 위한 아키텍처 패턴을 가지고 정밀한 아키텍처 구축</li><li>시스템을 위한 아키텍처 타입 선택</li><li>development diagram 생성</li><li>비기능적 요구 사항을 만족하도록 아키텍처 모델 보강</li></ul><h2 id="디자인"><a href="#디자인" class="headerlink" title="디자인"></a>디자인</h2><ul><li>유스케이스를 위한 디자인 모델 생성</li><li>솔루션 모델 생성</li><li>도메인 모델 보강</li><li>솔루션 모델과 도메인에 디자인 패턴 적용</li><li>복잡한 객체 상태를 모델</li></ul><h2 id="시스템-구축"><a href="#시스템-구축" class="headerlink" title="시스템 구축"></a>시스템 구축</h2><ul><li>소프트웨어 구현</li><li>테스트 수행</li><li>도메인 모델 보강</li><li>생산 환경속으로 소프트웨어 배치</li></ul><h1 id="UML-The-Unified-Modeling-Language"><a href="#UML-The-Unified-Modeling-Language" class="headerlink" title="UML(The Unified Modeling Language)"></a>UML(The Unified Modeling Language)</h1><p>UML은 프로젝트에 참여하는 모든 사람들이 이해할 수 있는 방법으로 개발 과정을 조직화 하는 수단이다. 시스템 개발에서도 참가자 전원이 이해 가능한 표현 수단이다.</p><p>UML의 요소는 Things(사물)과 Relationships(관계)로 나눌 수 있다. UML의 요소는 아래와 같다</p><ul><li>Actor: 시스템 사용자나 다른 시스템</li><li>use case: 시스템의 기능</li><li>class: 객체 지향 프로그램의 단위</li><li>object: 프로그램 수행시의 구체적인 메모리 정보</li><li>components: 독립적으로 재사용 가능한 모듈</li><li>state: 프로그램이나 구성 요소들의 상태</li><li>Activities: 프로그램의 동적 행위</li><li>dependencies: 의존도</li><li>Associations: 연관성</li><li>Generalizations: 상속</li><li>Realizations: 구현</li></ul><h2 id="UML-Diagram의-종류"><a href="#UML-Diagram의-종류" class="headerlink" title="UML Diagram의 종류"></a>UML Diagram의 종류</h2><h3 id="Use-Case-Diagram"><a href="#Use-Case-Diagram" class="headerlink" title="Use Case Diagram"></a>Use Case Diagram</h3><p>use case는 사용자의 입장에서 본 시스템의 행동이다. 시스템의 기능적 요소를 표현한 것이다. Actor와 use case를 사용해 완성된다. Actor는 사람과 시스템, 시간 모두 될 수 있다.</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>class는 객체 지향 프로그램의 단위이다. class는 method(함수)와 attributes(변수)로 이루어진다.</p><h3 id="Object-Diagram"><a href="#Object-Diagram" class="headerlink" title="Object Diagram"></a>Object Diagram</h3><p>시스템이 수행 시 클래스를 통한 구체적 정보를 메모리에 저장해 두고 사용하는데 그 메모리 정보를 얻을 수 있다. 하나의 클래스를 통해서 다양한 객체가 생길 수 있다.</p><h3 id="Collaboration-Diagram"><a href="#Collaboration-Diagram" class="headerlink" title="Collaboration Diagram"></a>Collaboration Diagram</h3><p>객체들간의 상관관계 또는 협력 작업을 그림으로 표현해 놓은 것을 말한다. 객체들 간의 관계는 실선으로 표현하며 화살표가 관계의 방향성을 지정한다. 화살표의 숫자는 시간상의 흐름을 표현하고 선의 이름으로 관계를 명확하게 설명할 수 있다.</p><h3 id="Sequence-Diagram"><a href="#Sequence-Diagram" class="headerlink" title="Sequence Diagram"></a>Sequence Diagram</h3><p>객체들끼리 주고받는 메세지의 순서를 시간의 흐름에 따라 표현하는 것이다.</p><h3 id="Activity-Diagram"><a href="#Activity-Diagram" class="headerlink" title="Activity Diagram"></a>Activity Diagram</h3><p>기능 수행을 위해 어떤 동작이 일어나는지, 동작에 따라 시스템의 상태가 어떻게 바뀌는지에 대해 그림으로 표현한 것이다.</p><h3 id="Component-Diagram"><a href="#Component-Diagram" class="headerlink" title="Component Diagram"></a>Component Diagram</h3><p>Component는 독립적으로 재사용 가능한 모듈이다. 객체지향 기술은 컴포넌트 기반으로 개발할 수 있다. 여러 컴포넌트를 통해 하나의 시스템을 이루는 그림이다.</p><h3 id="Deployment-Diagram"><a href="#Deployment-Diagram" class="headerlink" title="Deployment Diagram"></a>Deployment Diagram</h3><p>컴퓨터를 기반으로 하는 시스템의 물리적인 구조를 나타낸 그림이다.</p><h3 id="Package-Diagram"><a href="#Package-Diagram" class="headerlink" title="Package Diagram"></a>Package Diagram</h3><p>다이어그램들은 연관성 있는 단위들로 그룹화해서 묶어 관리하면 훨씬 유용하게된다.</p><h3 id="Statechart-Diagram"><a href="#Statechart-Diagram" class="headerlink" title="Statechart Diagram"></a>Statechart Diagram</h3><p>객체는 시간에 따라 다른 상태에 놓일 수 있다. 어떤 시스템에서 활동하고 있는 객체가 상황에 따라 자신의 상태를 변경할 수 있다면 이를 그림으로 표현하는 것이다.</p><h1 id="소프트웨어-개발-방법론"><a href="#소프트웨어-개발-방법론" class="headerlink" title="소프트웨어 개발 방법론"></a>소프트웨어 개발 방법론</h1><p>개발 과정에서 가장 기본이 되는 구조를 소프트웨어 방법론이라고 한다. 구조는 네 가지로 이뤄져 있으며, phases, workflow, activities, artifacts이다.</p><h2 id="Waterfall"><a href="#Waterfall" class="headerlink" title="Waterfall"></a>Waterfall</h2><p>폭포수 모델은 가장 오래된 개발 방법론 중 하나이다. 모든 프로세스가 직렬로 되어 있으며 <code>반복</code>하지 않는다. 한번 진행된 워크플로우는 다시 진행되지 않는다. 요구사항이 변경되어도 수정이 불가능한 단점이 있다.</p><p>클라이언트의 요구사항 변경이 예상되는 경우 적합하지 않다. 리스크가 낮은 프로젝트인 경우 한번에 성공 시킬 수 있는 경우 적합한 방법론이다.</p><h2 id="Unified-software-development-process"><a href="#Unified-software-development-process" class="headerlink" title="Unified software development process"></a>Unified software development process</h2><p>USDP는 UP 라고 불리기도 한다.</p><p>UP 방법론은 네 가지로 구성되어 있다.</p><h3 id="Inception-도입"><a href="#Inception-도입" class="headerlink" title="Inception(도입)"></a>Inception(도입)</h3><p>소프트웨어의 비전을 생성하는 단계로 비즈니스 유형을 이해하는데 중점을 둔다. 프로젝트의 위험 요소를 제시하게 되고 전개 단계의 계획이 짜여진다.</p><h3 id="Elaboration-전개"><a href="#Elaboration-전개" class="headerlink" title="Elaboration(전개)"></a>Elaboration(전개)</h3><p>시스템 아키텍처가 수립되고 대부분의 기능이 정의 되는 단계다. 프로젝트 위험 부담 감소가 목적이며, 프로젝트 매니저가 구현과 전이에 대한 정보를 가지고 있어야 한다.</p><h3 id="Construction-구축"><a href="#Construction-구축" class="headerlink" title="Construction(구축)"></a>Construction(구축)</h3><p>소프트웨어를 구축하는 단계로 여러번의 반복으로 use case가 추가되고 소프트웨어는 확대된다. 이 단계에서 시스템은 베타 버전을 발표하게 된다.</p><h3 id="Transition-전이"><a href="#Transition-전이" class="headerlink" title="Transition(전이)"></a>Transition(전이)</h3><p>시스템 가동을 위한 준비를 한다. 테스트, 디버깅, 트레이닝, 빌딩을 포함하는 프로젝트가 배치되는 단계이다.</p><h2 id="Rational-Unified-Process-RUP"><a href="#Rational-Unified-Process-RUP" class="headerlink" title="Rational Unified Process(RUP)"></a>Rational Unified Process(RUP)</h2><p>UP의 상용버전으로 각 단계에서 진행되는 워크플로우를 지원하고 산출물들이 쉽게 도출되도록 돕는다.</p><h2 id="SunTone-Architecture-Methodology"><a href="#SunTone-Architecture-Methodology" class="headerlink" title="SunTone Architecture Methodology"></a>SunTone Architecture Methodology</h2><p>sun에서 개발한 방법론으로 up의 프로세스를 따른다. 엔터프라이즈 어플리케이션의 아키텍처를 강조한다는 특징이 있다. 시스템의 비기능적 요구사항을 지원하는데 중점을 두어 시스템의 질을 높이고 위험 요소를 줄일 수 있다.</p><p>3D 큐브를 통해 가시화 한다. 가로는 수평적 tier 구조를 나타내고 높이는 수직적인 layer구조, 새로는 각 계발 단계를 명시한다.</p><h1 id="extreme-Programming-XP"><a href="#extreme-Programming-XP" class="headerlink" title="extreme Programming(XP)"></a>extreme Programming(XP)</h1><p>애자일 개발 방법론 중 하나로 단순성, 소통, 피드백 등의 원칙에 기반해 고객에게 최고의 가치를 빠르게 전달하도록 하는 경량화된 개발 방법론이다.</p><p>XP 개발 방법론의 특징은 짝(pair) 프로그래밍, 테스팅, 리팩토링, 단순화가 있다. 짝 프로그래밍으로 서로 코드를 짜고 리뷰를 하는 방식으로 더 좋은 코드를 생산해 낸다. 테스트는 코딩하기 이전 단계에서 테스트 프로그램을 먼저 만든다. 리팩토링은 짝 프로그래밍을 하는 동안 이뤄진다.</p><p>XP 개발 방법론은 전통적인 회사보단 실험적인 회사에서 적용하기 적합하다.</p>]]></content>
    
    
    <summary type="html">객체 지향 설계와 UML을 사용한 디자인</summary>
    
    
    
    <category term="java" scheme="https://nowgnastack.github.io/categories/java/"/>
    
    
    <category term="java oop uml oosd" scheme="https://nowgnastack.github.io/tags/java-oop-uml-oosd/"/>
    
  </entry>
  
  <entry>
    <title>그래프 자료구조 정리 (프림, 크루스칼, 다익스트라)</title>
    <link href="https://nowgnastack.github.io/2022/08/27/2022-08-27-graph_algorithm/"/>
    <id>https://nowgnastack.github.io/2022/08/27/2022-08-27-graph_algorithm/</id>
    <published>2022-08-27T05:56:00.000Z</published>
    <updated>2023-04-17T01:56:16.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prim-알고리즘"><a href="#Prim-알고리즘" class="headerlink" title="Prim 알고리즘"></a>Prim 알고리즘</h1><p>프림 알고리즘은 무향 그래프에서 MST(최소 스패닝 트리)를 찾는 알고리즘이다. 시작점에서 정점을 추가해 가면서 트리를 확장한다.</p><h2 id="동작"><a href="#동작" class="headerlink" title="동작"></a>동작</h2><p>정점 탐색 시 인접 정점 중 비용이 가장 작은 간선으로 연결된 정점을 선택해 연결한다</p><ol><li>시작 정점을 MST에 추가한다</li><li>MST 집합에 인접한 노드 중 최소 비용을 가지는 간선으로 연결된 노드를 선택, MST에 추가한다</li><li>MST가 정점개수 - 1 개의 간선을 가질 때까지 반복한다</li></ol><p>프림 알고리즘은 인접 행렬과 우선순위 큐를 사용해서 구현할 수 있다. 이번 포스팅에서는 SWEA 1251 하나로 문제로 우선순위 큐를 사용한 프림 알고리즘 코드를 구현해 본다</p><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV15StKqAQkCFAYD&categoryId=AV15StKqAQkCFAYD&categoryType=CODE&problemTitle=%ED%95%98%EB%82%98%EB%A1%9C&orderBy=FIRST_REG_DATETIME&selectCodeLang=ALL&select-1=&pageSize=10&pageIndex=1">하나로 문제 보러가기</a></p><p>문제에서 요구하는 것은 환경 부담금을 최소로 하는 섬들의 연결을 찾아 총 환경 부담금을 찾는 문제였다. 다른 그래프 문제와 다른 점은 정점들 사이에 간선을 직접 구해야 한다. 하나의 정점과 나머지 정점 사이의 모든 간선을 고려해서 MST를 생성해야 하는 문제였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> tc, N;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> E;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span>[][] matrix;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] visited;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> no;</span><br><span class="line">        <span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> no, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.no = no;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">        tc = Integer.parseInt(br.readLine());</span><br><span class="line">        matrix = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">2</span>][N];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= tc; i++) &#123;</span><br><span class="line">            N = Integer.parseInt(br.readLine()); <span class="comment">// 노드 개수</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123; <span class="comment">// 각 노드 입력 받기</span></span><br><span class="line">                matrix[j] = Arrays.stream(br.readLine().split(<span class="string">&quot; &quot;</span>)).mapToDouble(Double::parseDouble).toArray();</span><br><span class="line">            &#125;</span><br><span class="line">            E = Double.parseDouble(br.readLine()); <span class="comment">// 가중치</span></span><br><span class="line">            <span class="comment">// 입력 끝</span></span><br><span class="line"></span><br><span class="line">            List&lt;Node&gt;[] queues = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[N];</span><br><span class="line">            visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                queues[j] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; N; k++) &#123;</span><br><span class="line">                    <span class="type">double</span> <span class="variable">dist</span> <span class="operator">=</span> weightCalculate(matrix[<span class="number">0</span>][j], matrix[<span class="number">1</span>][j], matrix[<span class="number">0</span>][k], matrix[<span class="number">1</span>][k]); <span class="comment">// 간선 값</span></span><br><span class="line">                    queues[j].add(<span class="keyword">new</span> <span class="title class_">Node</span>(k, dist));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">// 각 점에 모든 점과의 거리 저장</span></span><br><span class="line"></span><br><span class="line">            Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; (<span class="type">int</span>) (o1.weight - o2.weight));</span><br><span class="line">            queue.offer(<span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 신장 트리의 구성에 포함되지 않은 정점 중 최소 비용 선택</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">miniVertex</span> <span class="operator">=</span> queue.poll();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (visited[miniVertex.no]) <span class="keyword">continue</span>; <span class="comment">// 방문 되었으면 다음 값 보기</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 신장 트리에 추가</span></span><br><span class="line">                visited[miniVertex.no] = <span class="literal">true</span>; <span class="comment">// 방문 처리</span></span><br><span class="line">                result += miniVertex.weight; <span class="comment">// 가중치 더해주기</span></span><br><span class="line">                <span class="keyword">if</span> (++cnt == N) <span class="keyword">break</span>; <span class="comment">// 모든 노드를 확인 했다</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 신장 트리에 새롭게 추가되는 정점과 신장트리에 포함되지 않은 정점들의 기존 최소 비용과 비교</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; queues[miniVertex.no].size(); j++) &#123;</span><br><span class="line">                    <span class="type">Node</span> <span class="variable">tmp</span> <span class="operator">=</span> queues[miniVertex.no].get(j);</span><br><span class="line">                    <span class="keyword">if</span> (!visited[tmp.no]) &#123;</span><br><span class="line">                        queue.add(tmp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;#%d %.0f\n&quot;</span>, i, result * E);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">weightCalculate</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> x2, <span class="type">double</span> y2)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">X</span> <span class="operator">=</span> Math.abs(x - x2);</span><br><span class="line">        <span class="type">double</span> <span class="variable">Y</span> <span class="operator">=</span> Math.abs(y - y2);</span><br><span class="line">        <span class="keyword">return</span> X * X + Y * Y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정점 개수 만큼의 연결리스트를 만들어 주어 하나의 정점과 나머지 정점 사이의 거리를 모두 계산해 준다.</p><ul><li>MST를 위한 우선 순위 큐를 생성해 주고 0번 노드를 추가한 후 진행한다.</li><li>방문한 노드 번호는 방문 처리를 해주고 가중치에 더해준다. 노드의 개수가 만족되면 종료해 준다.</li><li>현재 노드 번호의 연결 리스트에 담겨 있는 노드들을 확인하면서 방문되지 않은 노드들을 추가해 준다.</li><li>모든 노드들을 확인하게 되면 가중치의 최소 값이 나오게 된다.</li></ul><h1 id="Dijkstra-알고리즘"><a href="#Dijkstra-알고리즘" class="headerlink" title="Dijkstra 알고리즘"></a>Dijkstra 알고리즘</h1><p>다익스트라 알고리즘은 DP를 사용하는 최단 경로 알고리즘이다. 최단 거리를 구하기 위해 이전 값을 사용하는 특징을 가지고 있다.</p><h2 id="동작-1"><a href="#동작-1" class="headerlink" title="동작"></a>동작</h2><ol><li>시작 노드를 정한다</li><li>시작 노드를 기준으로 인접 노드의 최소 비용을 저장한다</li><li>방문하지 않은 노드 중에서 가장 적은 비용을 가진 노드를 선택한다</li><li>해당 노드를 거쳐 다음 노드로 가는 경우의 최소 비용을 갱신한다</li><li>3과 4를 반복한다</li></ol><p>다익스트라 알고리즘을 사용하여 풀었던 백준 4485 녹색 옷 입은 애가 젤다지? 문제를 풀어본다.</p><p><a href="https://www.acmicpc.net/problem/4485">녹색 옷 입은 애가 젤다지? 문제 보러가기</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N, tc, X, Y;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[][] map;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dy = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] dx = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">        N = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            tc++;</span><br><span class="line">            <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> Integer.parseInt(br.readLine());</span><br><span class="line">            <span class="keyword">if</span> (N == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="type">StringTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine(), <span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                    map[i][j] = Integer.parseInt(st.nextToken());</span><br><span class="line">                &#125; <span class="comment">// 각 테스트 케이스 입력 끝</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Y = <span class="number">0</span>;</span><br><span class="line">            X = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> D[][] = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">            <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[N][N];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] line :</span><br><span class="line">                    D) &#123;</span><br><span class="line">                Arrays.fill(line, Integer.MAX_VALUE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            D[Y][X] = map[Y][X];</span><br><span class="line"></span><br><span class="line">            Queue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="number">2</span>] - o2[<span class="number">2</span>]);</span><br><span class="line">            queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;Y, X, map[Y][X]&#125;);</span><br><span class="line">            visited[Y][X] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                <span class="type">int</span>[] cur = queue.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">curY</span> <span class="operator">=</span> cur[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">curX</span> <span class="operator">=</span> cur[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">curVal</span> <span class="operator">=</span> map[curY][curX];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">ny</span> <span class="operator">=</span> curY + dy[j];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> curX + dx[j];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (ny &gt;= <span class="number">0</span> &amp;&amp; nx &gt;= <span class="number">0</span> &amp;&amp; ny &lt; N &amp;&amp; nx &lt; N) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (D[ny][nx] &gt; D[curY][curX] + map[ny][nx]) &#123;</span><br><span class="line">                            D[ny][nx] = D[curY][curX] + map[ny][nx];</span><br><span class="line">                            queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;ny, nx, curVal + map[ny][nx]&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Problem &quot;</span> + tc + <span class="string">&quot;:&quot;</span> + <span class="string">&quot; &quot;</span> + D[N - <span class="number">1</span>][N - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 문제는 주어진 지도에서 목적지(N-1, N-1)까지 최소의 비용으로 도달 하는 것이 목적이다. 시작 지점은 (0, 0)이다. 테스트 케이스 개수가 따로 주어지지 않으므로 while 문을 사용해 N이 0이 될때 종료하도록 해준다.</p><ul><li>시작점은 0, 0이다</li><li>다익스트라 배열을 2차원 배열로 초기화 한다</li><li>우선 순위 큐에 시작 점과 빼야할 값을 함께 저장한다</li><li>4 방향 탐색을 하면서 다음 갈 다익스트라 배열에 저장된 거리와 현재 다익스트라 배열 거리 + 지도의 다음 거리를 비교해 다음 좌표가 더 가까우면(작으면) 다익스트라 배열을 갱신해 주고 큐에 다음 좌표를 추가해 준다.</li><li>반복해 주면 N-1, N-1 까지 가면서 최소 비용을 구할 수 있다.</li><li>다익스트라 배열의 N-1, N-1이 답이 된다.</li></ul><h1 id="Kruskal-알고리즘"><a href="#Kruskal-알고리즘" class="headerlink" title="Kruskal 알고리즘"></a>Kruskal 알고리즘</h1><p>크루스칼 알고리즘은 주어진 모든 정점을 가장 적은 비용으로 연결할 수 있다. 정점 사이에 사이클이 발생하면 안된다는 특징이 있다. 프로그래머스 섬 연결하기 문제로 크루스칼 알고리즘을 알아본다.</p><p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/42861">섬 연결하기 문제 보러가기</a></p><p>섬 연결하기 문제는 (start, end, 간선) 으로 정보가 주어진다. 간선의 최소를 만들 수 있도록 크루스칼 알고리즘을 사용한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, cnt, cost;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] cycle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        n = <span class="number">4</span>;</span><br><span class="line">        <span class="type">int</span>[][] costs = \&#123;\&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;, &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 사이클 테이블 선언</span></span><br><span class="line">        cycle = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cycle[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 비용 순으로 정렬</span></span><br><span class="line">        Arrays.sort(costs, ((o1, o2) -&gt; o1[<span class="number">2</span>] - o2[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; costs.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] item = costs[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 사이클 테이블 갱신</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> item[<span class="number">0</span>]; <span class="comment">// source</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> item[<span class="number">1</span>]; <span class="comment">// dest</span></span><br><span class="line">            cost = item[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 만약에 부모가 다르면 사이클이 안생기고 cost 를 더해주면서 연결해주면뎀</span></span><br><span class="line">            <span class="keyword">if</span> (find(start) != find(end)) &#123;</span><br><span class="line">                cnt += cost;</span><br><span class="line">                union(start, end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cnt);</span><br><span class="line"><span class="comment">//        return cnt;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cycle[node] == node) <span class="keyword">return</span> node;</span><br><span class="line">        <span class="keyword">return</span> cycle[node] = find(cycle[node]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">startParent</span> <span class="operator">=</span> find(start);</span><br><span class="line">        <span class="type">int</span> <span class="variable">endParent</span> <span class="operator">=</span> find(end);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (startParent &gt; endParent) cycle[startParent] = endParent;</span><br><span class="line">        <span class="keyword">else</span> cycle[endParent] = startParent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>크루스칼 알고리즘은 부모 노드 확인을 위한 parent 배열과 노드를 연결 시킬 union-find 알고리즘을 사용한다</p><ul><li>노드 개수 만큼 parent 배열을 초기화 해 준다. parent 배열의 초기화는 노드 자기 자신의 값으로 초기화 해준다</li><li>정보에 start와 end가 주어지는데 각 정점의 부모를 찾아 다르면 작은 부모 노드로 갱신하게 된다<ul><li>find 메서드로 현재 노드 값과 부모 값이 같으면 반환하고 그렇지 않으면 다시 부모를 찾는다</li></ul></li><li>start와 end의 부모가 같지 않으면, union(합집합) 메서드를 사용해 연결해 준다. 연결과 동시에 간선을 더해 준다<ul><li>union 연산은 각 노드의 부모를 찾은 후 더 작은 부모로 갱신한다</li></ul></li><li>모든 동작이 끝나게 되면 parent 배열의 값이 하나로 통일 된다(모두 연결이 가능한 경우)</li></ul>]]></content>
    
    
    <summary type="html">프림, 크루스칼, 다익스트라 알고리즘을 자바로 구현해보자</summary>
    
    
    
    <category term="algorithm" scheme="https://nowgnastack.github.io/categories/algorithm/"/>
    
    
    <category term="algorithm dijkstra java kruskal prim" scheme="https://nowgnastack.github.io/tags/algorithm-dijkstra-java-kruskal-prim/"/>
    
  </entry>
  
  <entry>
    <title>조합과 순열을 자바로 구현해 보자</title>
    <link href="https://nowgnastack.github.io/2022/08/20/2022-08-16-recursion1/"/>
    <id>https://nowgnastack.github.io/2022/08/20/2022-08-16-recursion1/</id>
    <published>2022-08-20T02:48:00.000Z</published>
    <updated>2023-04-17T01:56:16.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="조합-combination"><a href="#조합-combination" class="headerlink" title="조합(combination)"></a>조합(combination)</h1><blockquote><p>조합론에서 조합은 서로 다른 n개의 원소를 가지는 어떤 집합에서 순서에 상관없이 r개의 원소를 선택하는 것이며, 이는 n개의 원소로 이루어진 집합에서 r개의 원소로 이루어진 부분집합을 만드는 것 혹은 찾는 것과 같다.(위키백과)</p></blockquote><blockquote><p>조합의 개수 공식: <a href="https://ko.wikipedia.org/wiki/%EC%A1%B0%ED%95%A9">위키백과</a><sub>수식이 잘 들어가지 않아서 링크로 대체..</sub></p></blockquote><p>조합의 경우의 수 계산은 위 식과 같으며, 이항 계수라고 한다. 먼저 n개의 정수 중에 k개를 고르는 경우를 코드로 구현해 보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Comb</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] visit; <span class="comment">// 인덱스 방문처리를 위한 배열</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] arr; <span class="comment">// 고를 배열</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n; <span class="comment">// 배열의 길이</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        n = arr.length;</span><br><span class="line"></span><br><span class="line">        visit = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length]; <span class="comment">// static으로 선언된 visit을 초기화</span></span><br><span class="line">        comb(<span class="number">3</span>, <span class="number">0</span>); <span class="comment">// 조합 시작</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">comb</span><span class="params">(<span class="type">int</span> pick, <span class="type">int</span> depth)</span> &#123; <span class="comment">// 고를 개수, 재귀로 들어간 깊이</span></span><br><span class="line">        <span class="keyword">if</span> (pick == <span class="number">0</span>) &#123; <span class="comment">// 더 이상 고를 수 없는 경우</span></span><br><span class="line">            System.out.println(Arrays.toString(visit));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (depth == n) <span class="keyword">return</span>; <span class="comment">// 깊이는 0부터 n-1까지이므로 n이면 탈출</span></span><br><span class="line">        visit[depth] = <span class="number">1</span>; <span class="comment">// 현재 보는 인덱스를 방문처리</span></span><br><span class="line">        comb(pick - <span class="number">1</span>, depth + <span class="number">1</span>); <span class="comment">// 고를 개수 하나 줄이면서 재귀</span></span><br><span class="line">        visit[depth] = <span class="number">0</span>; <span class="comment">// 현재 인덱스에서 다 골랐으면 초기 상태로 돌아가기</span></span><br><span class="line">        comb(pick, depth + <span class="number">1</span>); <span class="comment">// 다시 고를 개수 , 깊이 +1로 재귀</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>재귀로 구현한 조합이다. <code>comb()</code>함수는 고를 개수 <code>pick</code>과 몇번 재귀를 도는지 확인할 <code>depth</code>가 입력으로 주어진다.</p><ol><li>pick: 3 depth: 0으로 comb 함수를 호출</li><li>visit[0] &#x3D; 1 방문처리 visit&#x3D;[1,0,0,0,0] pick: 2 depth: 1 comb 호출</li><li>visit[1] &#x3D; 1 방문처리 visit&#x3D;[1,1,0,0,0] pick: 1 depth: 2 comb 호출</li><li>visit[2] &#x3D; 1 방문처리 visit&#x3D;[1,1,1,0,0] pick: 0 depth: 3 comb 호출</li><li>pick: 0조건으로 visit 출력 후 반환 (pick과 depth는 3번 상태)</li><li>visit[2] &#x3D; 0 초기화 visit&#x3D;[1,1,0,0,0] pick: 1 depth: 3 comb 호출</li><li>visit[3] &#x3D; 1 방문처리 visit&#x3D;[1,1,0,1,0] pick: 0 depth: 4 comb 호출</li><li>pick: 0조건으로 visit 출력 후 반환 (pick과 depth는 6번 상태)</li><li>visit[3] &#x3D; 0 초기화 visit&#x3D;[1,1,0,0,0] pick: 1 depth: 4 comb 호출</li><li>visit[4] &#x3D; 1 방문처리 visit&#x3D;[1,1,0,0,1] pick: 0 depth: 5 comb 호출</li><li>pick: 0조건으로 visit 출력 후 반환 (pick과 depth는 9번 상태)</li><li>visit[4] &#x3D; 0 초기화 visit&#x3D;[1,1,0,0,0] pick: 1 depth: 5 comb 호출</li><li>depth &#x3D;&#x3D; n(5) 로 탈출조건 만족, 반환</li><li>visit[1] &#x3D; 0 초기화 visit&#x3D;[1,0,0,0,0] pick: 2 depth: 2 comb호출</li><li>반복</li></ol><p>위 코드를 따라가 보았다. 디버깅 도구를 사용해 한 라인씩 실행시켜보았다.</p><p>visit 배열에 방문하면서 고른 인덱스를 1로 만들어 주고 모두 고르면 <code>pick==0</code>의 조건에서 생성된 하나의 조합에 대해 원하는 동작을 구현하면 된다.</p><p>위 코드는 pick이 3인 경우의 동작만을 실행하지만, 반복문을 사용해 개수별로 원하는 조합을 만들어 낼 수 있다.</p><h2 id="조금-더-간단한-조합-구현하기"><a href="#조금-더-간단한-조합-구현하기" class="headerlink" title="조금 더 간단한 조합 구현하기"></a>조금 더 간단한 조합 구현하기</h2><p>위 코드에서는 visit 배열을 사용해서 단순히 인덱스가 선택되었는지 확인할 수 있는 코드였다. 이번에는 주어진 배열에서 값을 직접 조합하여 출력하는 방식으로 구현해 볼 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Combination</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N, R, totalCnt;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] numbers, input;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        R = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        input = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        numbers = <span class="keyword">new</span> <span class="title class_">int</span>[R];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            input[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        comb(<span class="number">0</span>, <span class="number">0</span>); <span class="comment">// start : 뽑은 개수</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cnt+1 번째 해당하는 조합에 포함될 수 뽑기</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">comb</span><span class="params">(<span class="type">int</span> cnt, <span class="type">int</span> start)</span> &#123;</span><br><span class="line"><span class="comment">// cnt: 직전까지 뽑은 조합에 포함된 수의 개수,</span></span><br><span class="line"><span class="comment">// start: 시도할 수의 시작 위치</span></span><br><span class="line">        <span class="keyword">if</span> (cnt == R) &#123;</span><br><span class="line">            totalCnt++;</span><br><span class="line">            System.out.println(Arrays.toString(numbers));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 가능한 모든 수에 대해 시도 (input 배열의 가능한 수 시도)</span></span><br><span class="line">        <span class="comment">// start 부터 처리시 중복 수 추출 방지 및 순서가 다른 조합 추출 방지</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; N; i++) &#123; <span class="comment">// 선택지</span></span><br><span class="line">            <span class="comment">// start 위치부터 처리했으므로 중복 체크 필요 없다</span></span><br><span class="line">            <span class="comment">// 양쪽에서 선택되지 않았다면 수를 사용</span></span><br><span class="line">            numbers[cnt] = input[i];</span><br><span class="line">            <span class="comment">// 다음 수 뽑으러 가기</span></span><br><span class="line">            comb(cnt + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cnt는 만들어진 조합에 포함된 수의 개수이고, start는 어느 숫자부터 시작할 것인지 정한다. 조합은 이미 봤던 수에 대해서는 추가할 필요가 없기 때문에 반복문의 i는 start부터 시작한다.</p><p>조합에 포함된 개수가 뽑고 싶은 개수를 만족 하는 경우 원하는 동작을 하게 한다. 5개의 수에서 3개를 고르는 조합이 생성되는 순서를 확인해 보자</p><ol><li>처음 comb(cnt&#x3D;0, start&#x3D;0)으로 시작</li><li>[for] i&#x3D;0 N까지 numbers[0] &#x3D; input[0] 배열의 첫 번째 원소를 선택 [1, 0, 0]</li><li>comb(cnt&#x3D;1, start&#x3D;1) 으로 재귀</li><li>[for] i&#x3D;1 N까지 numbers[1] &#x3D; input[1] 배열의 두 번째 원소 선택 [ 1, 2, 0]</li><li>comb(cnt&#x3D;2, start&#x3D;2) 으로 재귀</li><li>[for] i&#x3D;2 N까지 numbers[2] &#x3D; input[2] 배열의 세 번째 원소 선택 [1, 2, 3]</li><li>comb(cnt&#x3D;3, start&#x3D;3) 으로 재귀</li><li>cnt &#x3D; R(3) 조건 만족, 원하는 동작 이후 반환</li><li>6번 [for]로 돌아가 i&#x3D;3이 되고, numbers[2] &#x3D; input[3] 배열의 네 번째 원소 선택 [1, 2, 4]</li><li>comb(cnt&#x3D;3, start&#x3D;4) 으로 재귀</li><li>8과 동일하게 cnt&#x3D;R(3) 조건 만족, 원하는 동작 이후 반환</li><li>위 과정을 반복</li></ol><h2 id="이항계수-문제-예시"><a href="#이항계수-문제-예시" class="headerlink" title="이항계수 문제 예시"></a>이항계수 문제 예시</h2><p>문제에서 요구하는 것이 조합의 개수인 경우 이항계수를 사용해 쉽게 구할 수 있다. DP와 이항계수로 풀 수 있는 다리놓기 문제를 풀 것이다.</p><h3 id="다리놓기"><a href="#다리놓기" class="headerlink" title="다리놓기"></a>다리놓기</h3><p>문제 보러가기: <a href="https://www.acmicpc.net/problem/1010">1010 다리 놓기</a></p><p>간단하게 문제를 설명하면, 강의 서쪽과 동쪽을 연결할 다리를 놓아야 하는데, 서쪽 사이트는 동쪽 사이트보다 작다. 서쪽을 n, 동쪽을 r로 생각하고, $_nC_r$을 구하면 된다.</p><p>첫 시도에서 팩토리얼 함수를 구현해 구하려 했지만, 시간초과가 발생했다. 이 문제는 이항계수를 사용해 해결하였다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span>[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">testcase</span> <span class="operator">=</span> Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>; t &lt; testcase; t++) &#123;</span><br><span class="line">            <span class="type">int</span>[] array = Arrays.stream(br.readLine().split(<span class="string">&quot; &quot;</span>)).mapToInt(Integer::parseInt).toArray();</span><br><span class="line">            n = array[<span class="number">0</span>];</span><br><span class="line">            m = array[<span class="number">1</span>];</span><br><span class="line">            dp = <span class="keyword">new</span> <span class="title class_">long</span>[m + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// dp[i][j] = iCj 이항 계수 공식 = dp[i][j] = dp[i-1][j-1] + dp[i-1][j]</span></span><br><span class="line">            <span class="comment">// dp[i][i] = 전체 중에 전체를 꺼내는 경우 = 1</span></span><br><span class="line">            <span class="comment">// dp[i][0] = 아예 안꺼내는 경우 = 1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                dp[i][i] = <span class="number">1</span>;</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; m + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                dp[i][<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(dp[m][n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                System.out.print(dp[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DP 테이블을 생성한 다음 이항 계수 공식을 사용하여 해결한다. [i, i]와 [i, 0], [1, 1]의 경우는 한 가지 방법만 존재하므로, 1로 만들어 준 후 나머지 테이블에 대해 공식을 적용해 준다.</p><p>모든 테이블에 수식을 적용한 후 문제에서 주어진 n, r 좌표 값에 해당하는 테이블 값이 만들 수 있는 조합의 수이다.</p><h1 id="순열"><a href="#순열" class="headerlink" title="순열"></a>순열</h1><blockquote><p>순열은 순서가 부여된 임의의 집합을 다른 순서로 뒤섞는 연산이다. (위키백과)</p></blockquote><p>$$<br>P(n,k)&#x3D;n(n-1)\cdots (n-k+1)<br>$$</p><p>위 공식은 n개의 원소에서 k개의 원소를 골라 배열하는 방법의 수를 계산하는 식이다. 원하는 개수의 순열을 구하는 코드를 구현해 보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prem2</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> n, r, totalCount;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] numbers, input;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] isSelected;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nPr : 1부터 n까지의 수 중 n개를 모두 뽑아 순서적으로 나열한 것</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        n = <span class="number">3</span>;</span><br><span class="line">        r = <span class="number">3</span>;</span><br><span class="line">        totalCount = <span class="number">0</span>;</span><br><span class="line">        input = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        numbers = <span class="keyword">new</span> <span class="title class_">int</span>[r];</span><br><span class="line">        isSelected = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            input[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        perm(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">perm</span><span class="params">(<span class="type">int</span> cnt)</span> &#123; <span class="comment">// cnt+1 번째 해당하는 수를 뽑기</span></span><br><span class="line">        <span class="keyword">if</span> (cnt == r) &#123;</span><br><span class="line">            totalCount++;</span><br><span class="line">            System.out.println(Arrays.toString(numbers));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 가능한 모든 수에 대해 시도</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 시도하는 수가 선택되었는지 판단</span></span><br><span class="line">            <span class="keyword">if</span> (isSelected[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 선택되지 않았다면 수를 사용</span></span><br><span class="line">            numbers[cnt] = input[i];</span><br><span class="line">            isSelected[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 다음 수 뽑으러 가기</span></span><br><span class="line">            perm(cnt + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 사용했던 수에 대해 선택을 되돌려 놓기</span></span><br><span class="line">            isSelected[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>numbers라는 빈 배열에 주어진 배열의 값들을 하나씩 탐색하면서 순열을 만들어 낸다. cnt를 새로 생성할 배열의 인덱스로 사용한다. visit 배열에 방문 여부를 확인하면서 새로운 배열을 만들어 간다.</p><p>조합과 유사하게 재귀를 돌면서 방문한 인덱스 값을 새 배열에 넣어두고 고를 개수 <code>r</code>개를 만족하게 되면 원하는 동작을 구현하면 된다.</p><h1 id="부분-집합-구현하기"><a href="#부분-집합-구현하기" class="headerlink" title="부분 집합 구현하기"></a>부분 집합 구현하기</h1><p>부분집합은 주어진 배열에서 고를 수 있는 모든 경우의 상태를 만들어 내는 것이다. 아무것도 뽑지 않는 경우부터 모든 배열을 뽑는 경우까지를 만들어 낸다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Subset</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N, totalCnt;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] input;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span>[] isSelected;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        N = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        totalCnt = <span class="number">0</span>;</span><br><span class="line">        input = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        isSelected = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            input[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        subset(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">subset</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line"><span class="comment">// index : 부분집합에 고려할 대상</span></span><br><span class="line">        <span class="keyword">if</span> (index == N) &#123;</span><br><span class="line"><span class="comment">// 더 이상 고려할 원소가 없다면 부분 집합의 구성이 완성</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                System.out.print(isSelected[i] ? <span class="string">&quot;o&quot;</span> + <span class="string">&quot; &quot;</span> : <span class="string">&quot;x&quot;</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 원소 선택</span></span><br><span class="line">        isSelected[index] = <span class="literal">true</span>;</span><br><span class="line">        subset(index + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 원소 미선택</span></span><br><span class="line">        isSelected[index] = <span class="literal">false</span>;</span><br><span class="line">        subset(index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>부분집합이 생성되는 과정을 알아본다</p><ol><li>subset(index&#x3D;0)으로 시작</li><li>isSelected[0] &#x3D; true 첫 인덱스 선택 subset(index&#x3D;1) 로 재귀</li><li>isSelected[1] &#x3D; true 두 번째 인덱스 선택 subset(index&#x3D;2) 로 재귀</li><li>isSelected[2] &#x3D; true 세 번째 인덱스 선택 subset(index&#x3D;3) 로 재귀</li><li>index가 5가 될 때(모든 수 선택)까지 진행</li><li>index &#x3D;&#x3D; N 인 경우 하나의 부분집합 완성, 원하는 동작 후 반환</li><li>isSelected[4] &#x3D; false 다섯 번째 인덱스 초기화 subset(index&#x3D;5) 로 재귀 (원소 미선택)</li><li>index &#x3D;&#x3D; N으로 원하는 동작 후 반환 [true, true, true, true, false]</li><li>isSelected[3] &#x3D; false 네 번째 인덱스 초기화 subset(index&#x3D;4) 로 재귀 (원소 미선택)</li><li>isSelected[4] &#x3D; true 다섯 번째 인덱스 선택 subset(index&#x3D;5) 로 재귀 (원소 선택)</li><li>index &#x3D;&#x3D; N으로 원하는 동작 후 반환 [true, true, true, false, true]</li><li>isSelected[4] &#x3D; false 다섯 번째 인덱스 초기화 subset(index&#x3D;5) 로 재귀 (원소 미선택)</li><li>index &#x3D;&#x3D; N으로 원하는 동작 후 반환 [true, true, true, false, false]</li><li>모든 원소를 선택하지 않을 때까지 반복</li></ol><p>위 코드를 눈으로 보기만 하면 직관적으로 다가오지 않아 디버깅 도구를 사용해 한 줄씩 실행해 보며 따라가 보았다.</p><p>index가 N을 만족하는 경우 하나의 부분 집합이 생성된 것이고, 동작이 끝나고 반환하게 되면 원소 미선택 부분이 실행되고, 이 부분에서 index가 N을 만족하면 다시 원소 미선택 실행, index가 N을 만족하지 않으면 원소 선택 부분이 실행된다.</p><p>재귀는 순열이나 조합에서도 꾸준히 나오지만 조건을 만족한 후 반환되고 어느 단계로 돌아가는지 확인 하는 것이 매우 중요하다고 생각한다.</p>]]></content>
    
    
    <summary type="html">java로 순열과 조합을 구현한다</summary>
    
    
    
    <category term="java" scheme="https://nowgnastack.github.io/categories/java/"/>
    
    
    <category term="algorithm combination java permutation" scheme="https://nowgnastack.github.io/tags/algorithm-combination-java-permutation/"/>
    
  </entry>
  
  <entry>
    <title>JDK 설치와 Sprint Tool Suite 시작하기</title>
    <link href="https://nowgnastack.github.io/2022/07/16/2022-07-16-ssafy-startcamp/"/>
    <id>https://nowgnastack.github.io/2022/07/16/2022-07-16-ssafy-startcamp/</id>
    <published>2022-07-16T07:13:00.000Z</published>
    <updated>2023-07-23T15:19:51.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="STS-3-설치하기"><a href="#STS-3-설치하기" class="headerlink" title="STS 3 설치하기"></a>STS 3 설치하기</h2><p>sprint tool suite는 Eclipse에서 spring 프로젝트를 동작할 수 있는 툴 같다. 현재 spring tool suite 4 버전까지 나와 있으며, 4버전은 spring 프로젝트만 가능하다고 한다.</p><p>이번 프로젝트에서는 3버전이 필요하다. 3버전은 <a href="https://spring.io/tools">spring.io</a> 아래에 <code>Sprint Tool Suite 3 wiki</code>에서 확인할 수 있다.</p><p><img src="/images/posting/ssafy/startcamp/pic1.png" alt="스크린샷 2022-07-16 오후 3.33.16.png"></p><p>macos를 사용하고 있으므로 <code>.dmg</code>확장자를 설치해준다.</p><p><img src="/images/posting/ssafy/startcamp/pic2.png" alt="스크린샷 2022-07-16 오후 3.38.27.png"></p><p><code>.dmg</code>파일을 더블클릭해서 3개의 파일을 모두 Applications에 넣어준다. 넣어준 후 새 폴더를 생성해서 3개의 파일을 모두 넣어준다.</p><p><img src="/images/posting/ssafy/startcamp/pic3.png" alt="스크린샷 2022-07-16 오후 3.36.53.png"></p><p>STS를 설치하기 이전에는 zulu jdk를 m1용으로 설치했었다. m1용 JDK로 STS를 열려고하면 오류가 난다. STS 3 버전은 <code>x86 64-bit</code> architecture가 필요하다고 해서 zulu jdk 페이지에서 새로 받아주었다.</p><h2 id="JDK-환경변수-설정하기"><a href="#JDK-환경변수-설정하기" class="headerlink" title="JDK 환경변수 설정하기"></a>JDK 환경변수 설정하기</h2><p>jdk를 설치하고 환경변수를 잡아줘야 한다. 설정파일에 환경변수를 잡아줘야 하는데 인텔 macos는 .bash_profile, m1은 .zshrc일 것이다. vi나 nano를 사용해도 좋고 vscode에서 편하게 열어서 설정하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/&#123;jdk version&#125;/Contents/Home</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>설정파일을 열어 위 두 줄을 넣어준 후 <code>source ~/.zshrc</code> 명령을 터미널에 타이핑해 주면 터미널에 적용된다.</p><p><img src="/images/posting/ssafy/startcamp/pic4.png" alt="스크린샷 2022-07-16 오후 3.46.42.png"></p><p>터미널에서 <code>java -version</code> 명령으로 설치된 jdk의 버전을 확인할 수 있다. 위와 유사하게 나온다면 정상적으로 환경변수가 잡힌 것이다.</p><h2 id="STS에서-프로젝트-실행해-보기"><a href="#STS에서-프로젝트-실행해-보기" class="headerlink" title="STS에서 프로젝트 실행해 보기"></a>STS에서 프로젝트 실행해 보기</h2><p><img src="/images/posting/ssafy/startcamp/pic5.png" alt="스크린샷 2022-07-16 오후 3.50.51.png"></p><p>STS를 실행 시키고 상단 바에서 <code>FIle→Open Project from File System</code>을 클릭하면 위와 같은 창이 뜨게 된다. <code>Archive</code>를 눌러 원하는 프로젝트 폴더나 zip파일을 선택하면 된다.</p><p>현재 프로젝트는 MYSQL 연결이 되어 있는 프로젝트다. 도커로 MYSQL 컨테이너를 실행하고 데이터베이스와 테이블을 생성한 후 STS 프로젝트를 실행시켰다.</p><p><img src="/images/posting/ssafy/startcamp/pic6.png" alt="스크린샷 2022-07-16 오후 4.03.31.png"></p><p>Package Explorer에서 프로젝트 우클릭한 후 <code>Run As → Sprint Boot App</code>으로 실행시키면 STS 터미널에 아래와 같은 로그가 뜬다.</p><p><img src="/images/posting/ssafy/startcamp/pic7.png" alt="스크린샷 2022-07-16 오후 4.07.27.png"></p><p>JDK 설치와 STS 프로젝트 실행에 대해 알아보았다.</p>]]></content>
    
    
    <summary type="html">m1에서 JDK 설치와 STS 3에서 프로젝트 실행하기</summary>
    
    
    
    <category term="java" scheme="https://nowgnastack.github.io/categories/java/"/>
    
    
    <category term="eclipse java spring" scheme="https://nowgnastack.github.io/tags/eclipse-java-spring/"/>
    
  </entry>
  
  <entry>
    <title>SSAFY 8기 합격 후기</title>
    <link href="https://nowgnastack.github.io/2022/07/10/2022-07-10-ssafy/"/>
    <id>https://nowgnastack.github.io/2022/07/10/2022-07-10-ssafy/</id>
    <published>2022-07-09T16:35:00.000Z</published>
    <updated>2023-07-23T15:19:42.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSAFY-8기-지원"><a href="#SSAFY-8기-지원" class="headerlink" title="SSAFY 8기 지원"></a>SSAFY 8기 지원</h1><p><img src="/images/posting/ssafy/ssafy/pic1.png" alt="스크린샷 2022-07-10 오전 12.28.58.png"></p><p>작년 7기에 지원하여 적성에서 떨어졌었다. 이번 8기가 마지막이라고 생각하고 지원하였다. 백엔드 개발자가 되고 싶었고, 싸피에서는 spring을 배우기 때문에 꼭 합격하고 싶었다.</p><h1 id="에세이-작성"><a href="#에세이-작성" class="headerlink" title="에세이 작성"></a>에세이 작성</h1><p>에세이는 한 문항(500자)였다. 500자 안에 많은 것을 담을 수 없었기 때문에 최대한 싸피의 교육이 필요하다는 것과 나를 가장 잘 표현할 수 있는 내용으로 적었다. 일반적으로 작성했던 자소서와 다르게 적어서 도전적이었던 방식이었다.</p><p>이번 8기에서는 전공자는 코테를 봤다. 코테와 자소서를 통과하여 인터뷰를 보게 되었다.</p><p><img src="/images/posting/ssafy/ssafy/pic2.png" alt="스크린샷 2022-07-10 오전 12.37.28.png"></p><p>운 좋게 1차 통과를 하여 인터뷰를 보게 되었다. 인터뷰 준비는 면접 스터디는 따로 하지 않고 자소서 기반으로 예상 질문을 준비했다. 또한 왜 싸피의 교육이 필요한지에 대한 질문을 준비했다. 싸피는 pt면접과 일반 면접이 있다. pt면접은 어떤 주제가 나올지 모르지만, 최신 기술 동향에 대해 알고 가는게 좋다고 생각했다.</p><h3 id="pt-면접-준비"><a href="#pt-면접-준비" class="headerlink" title="pt 면접 준비"></a>pt 면접 준비</h3><blockquote><p>인공지능 공부를 했던 경험으로 최대한 해봤던 것을 이용하려고 생각했다<br>크게 자연어, 이미지 처리에 대한 기본적인 이론<br>머신러닝과 딥러닝의 차이<br>강화학습과 연합학습</p></blockquote><p>블록체인과 메타버스 분야에 대한 내용은 기술적으로 알고 있는 내용이 아니었기 때문에 인공지능으로 풀려고 생각했다.</p><h3 id="일반-면접-질문"><a href="#일반-면접-질문" class="headerlink" title="일반 면접 질문"></a>일반 면접 질문</h3><blockquote><p>1분 자기소개<br>지원동기<br>다른 교육도 많은데 왜 싸피인가?<br>싸피의 교육이 필요한 이유?<br>싸피를 통해 이루고 싶은 것?<br>어떤 개발자가 되고 싶은가?<br>장점과 단점<br>팀 프로젝트에서 힘들었던 점과 해결 방법?<br>마지막으로 하고 싶은 말</p></blockquote><p>면접 준비는 이런식으로 했다. 뻔한 질문들이지만, 답변을 자연스럽게 할 수 있도록 준비했다. 가장 중요하게 생각한 것은 1분 자기소개였다. 평가에 중요한 요소는 아닐수 있지만, 1분 자기소개를 통해 질문을 이끌어 낼 수 있도록 준비했다.</p><h1 id="최종-합격"><a href="#최종-합격" class="headerlink" title="최종 합격"></a>최종 합격</h1><p><img src="/images/posting/ssafy/ssafy/pic3.png" alt="스크린샷 2022-07-10 오전 12.57.27.png"></p><p>면접은 어떻게 될지 아무도 모르기 때문에 무난하게 봤지만 큰 기대를 하지 않았다. 단지 빨리 결과가 나오길 기다리고 있었고 생각보다 결과가 빨리 나왔다. 1지망 지역인 서울에 합격하게 되어서 좋았다. 정말 하고 싶었던 만큼 1년동안 부족한 부분을 싸피에서 다 채울 수 있으면 좋겠다.</p>]]></content>
    
    
    <summary type="html">ssafy 합격 후기</summary>
    
    
    
    <category term="ssafy" scheme="https://nowgnastack.github.io/categories/ssafy/"/>
    
    
    <category term="합격후기" scheme="https://nowgnastack.github.io/tags/%ED%95%A9%EA%B2%A9%ED%9B%84%EA%B8%B0/"/>
    
    <category term="ssafy" scheme="https://nowgnastack.github.io/tags/ssafy/"/>
    
  </entry>
  
  <entry>
    <title>NestJS 프로젝트 시작하기 With Docker(3)</title>
    <link href="https://nowgnastack.github.io/2022/06/11/2022-06-11-nest3/"/>
    <id>https://nowgnastack.github.io/2022/06/11/2022-06-11-nest3/</id>
    <published>2022-06-10T16:33:00.000Z</published>
    <updated>2023-07-23T15:19:36.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NestJS에서-swagger-사용하기"><a href="#NestJS에서-swagger-사용하기" class="headerlink" title="NestJS에서 swagger 사용하기"></a>NestJS에서 swagger 사용하기</h1><p>NestJS에서 swagger api 문서 생성은 아주 간편하다. NodeJS에서 swagger를 사용하려면, yaml 파일을 사용하거나 코드에 주석으로 추가해 줘야 했다.</p><p>NestJS에서는 데코레이터만 사용해서 swagger api 문서를 생성할 수 있다. 정말 편하다</p><h1 id="swagger를-사용하기-위한-패키지-설치"><a href="#swagger를-사용하기-위한-패키지-설치" class="headerlink" title="swagger를 사용하기 위한 패키지 설치"></a>swagger를 사용하기 위한 패키지 설치</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @nestjs/swagger swagger-ui-express</span><br></pre></td></tr></table></figure><p>두 패키지를 설치한다.</p><h1 id="main-ts"><a href="#main-ts" class="headerlink" title="main.ts"></a>main.ts</h1><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./app.module&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;dotenv/config&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DocumentBuilder</span>, <span class="title class_">SwaggerModule</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/swagger&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Logger</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/common&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> config <span class="keyword">from</span> <span class="string">&quot;config&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">GlobalExceptionFilter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./exception/globalexception.filter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cookieParser <span class="keyword">from</span> <span class="string">&quot;cookie-parser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> logger = <span class="keyword">new</span> <span class="title class_">Logger</span>();</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>, &#123; <span class="attr">cors</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">useGlobalFilters</span>(<span class="keyword">new</span> <span class="title class_">GlobalExceptionFilter</span>());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> port = config.<span class="property">get</span>&lt;<span class="built_in">number</span>&gt;(<span class="string">&quot;server.port&quot;</span>); <span class="comment">// port config</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> swaggerConfig = <span class="keyword">new</span> <span class="title class_">DocumentBuilder</span>()</span><br><span class="line">    .<span class="title function_">setTitle</span>(<span class="string">&quot;users api test&quot;</span>)</span><br><span class="line">    .<span class="title function_">setDescription</span>(<span class="string">&quot;nest js swagger test&quot;</span>)</span><br><span class="line">    .<span class="title function_">setVersion</span>(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">    .<span class="title function_">addTag</span>(<span class="string">&quot;users&quot;</span>)</span><br><span class="line">    .<span class="title function_">addBearerAuth</span>()</span><br><span class="line">    .<span class="title function_">build</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> swaggerDocs = <span class="title class_">SwaggerModule</span>.<span class="title function_">createDocument</span>(app, swaggerConfig);</span><br><span class="line">  <span class="title class_">SwaggerModule</span>.<span class="title function_">setup</span>(<span class="string">&quot;api&quot;</span>, app, swaggerDocs);</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(port);</span><br><span class="line">  logger.<span class="title function_">log</span>(<span class="string">`application run in <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure><p>swagger api 문서 적용을 위해서는 <code>main.ts</code>에 설정을 해 줘야 한다. <code>swaggerConfig</code>에 api 문서에 대한 내용을 지정해 준다. <code>SwaggerModule.setup</code>에 swagger api 문서에 접근할 수 있는 경로를 설정해 준다.</p><h1 id="Decorator-사용하기"><a href="#Decorator-사용하기" class="headerlink" title="Decorator 사용하기"></a>Decorator 사용하기</h1><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="title class_">ApiBearerAuth</span>,</span><br><span class="line">    <span class="title class_">ApiBody</span>,</span><br><span class="line">    <span class="title class_">ApiHeader</span>,</span><br><span class="line">    <span class="title class_">ApiResponse</span>,</span><br><span class="line">    <span class="title class_">ApiTags</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiTags</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UsersController</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> userService: UsersService</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Post</span>(<span class="string">&#x27;registration&#x27;</span>) <span class="comment">// http method</span></span><br><span class="line">    <span class="meta">@UsePipes</span>(<span class="title class_">ValidationPipe</span>) <span class="comment">// validation pipe</span></span><br><span class="line">    <span class="meta">@ApiBody</span>(&#123; <span class="attr">type</span>: insertUserDto &#125;) <span class="comment">// swagger body</span></span><br><span class="line">    <span class="meta">@ApiResponse</span>(&#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;user created&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">createUser</span>(</span><br><span class="line">        <span class="meta">@Res</span>() <span class="attr">res</span>: <span class="built_in">any</span>,</span><br><span class="line">        <span class="meta">@Body</span>() <span class="attr">userDto</span>: insertUserDto,</span><br><span class="line">    ): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">        <span class="comment">//   사용자 회원가입</span></span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">create</span>(userDto);</span><br><span class="line">        <span class="keyword">const</span> succMessage = <span class="string">&#x27;user created&#x27;</span>;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="title class_">HttpStatus</span>.<span class="property">CREATED</span>).<span class="title function_">json</span>(succMessage);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>...</code>으로 되어 있는 부분은 코드가 생략되어 있는 부분이다.</p><p>controller에서 <code>@nestjs/swagger</code>에서 데코레이터를 import 해서 사용한다. 각 controller 라우터 바로 위에 추가해 준다.</p><p>@Api…로 되어 있는 것들이 swagger api 문서에 적용되는 부분이다. 위 함수에 있는 데코레이터만 간단하게 설명할 것이다.</p><h3 id="ApiBody"><a href="#ApiBody" class="headerlink" title="@ApiBody()"></a>@ApiBody()</h3><p><img src="/images/posting/backend/nest3/pic1.png" alt="스크린샷 2022-06-11 오전 1.03.45.png"></p><p>swagger api 문서에서 정해진 body에 값을 넣어 Post 요청을 보낼 수 있도록 할 수 있다.</p><h3 id="ApiResponse"><a href="#ApiResponse" class="headerlink" title="@ApiResponse()"></a>@ApiResponse()</h3><p><img src="/images/posting/backend/nest3/pic2.png" alt="스크린샷 2022-06-11 오전 1.08.42.png"></p><p>아래 Responses 부분을 보면 응답에 대한 자세한 설명을 적을 수 있다. 응답의 형태도 지정할 수 있다. 응답에 대한 지정은 DTO에 정의한다.</p><h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.dto.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ApiProperty</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@nestjs/swagger&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">currentUserInfo</span> &#123;</span><br><span class="line">  <span class="meta">@ApiProperty</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;사용자 고유 아이디&quot;</span>, <span class="attr">type</span>: <span class="title class_">String</span> &#125;)</span><br><span class="line">  <span class="attr">user_id</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiProperty</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;사용자 이름&quot;</span>, <span class="attr">type</span>: <span class="title class_">String</span> &#125;)</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiProperty</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;사용자 이메일&quot;</span>, <span class="attr">type</span>: <span class="title class_">String</span> &#125;)</span><br><span class="line">  <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiProperty</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;사용자 프로필 이미지&quot;</span>, <span class="attr">type</span>: <span class="title class_">String</span> &#125;)</span><br><span class="line">  <span class="attr">profile_image</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiProperty</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;사용자 등급&quot;</span>, <span class="attr">type</span>: <span class="title class_">Number</span> &#125;)</span><br><span class="line">  <span class="attr">rating</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiProperty</span>(&#123; <span class="attr">description</span>: <span class="string">&quot;사용자 경험치&quot;</span>, <span class="attr">type</span>: <span class="title class_">Number</span> &#125;)</span><br><span class="line">  <span class="attr">exp</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Response에 각 필드에 @ApiProperty를 붙여준다. 설명과 type을 설정해 줄 수 있고, 다른 옵션들도 사용할 수 있다.</p>]]></content>
    
    
    <summary type="html">nest js 3계층 구조에 대해</summary>
    
    
    
    <category term="web" scheme="https://nowgnastack.github.io/categories/web/"/>
    
    
    <category term="swagger" scheme="https://nowgnastack.github.io/tags/swagger/"/>
    
    <category term="api" scheme="https://nowgnastack.github.io/tags/api/"/>
    
    <category term="nest js" scheme="https://nowgnastack.github.io/tags/nest-js/"/>
    
  </entry>
  
</feed>
